--- a/source/fitz/load-jpx.c	2016-04-21 13:14:32.000000000 +0200
+++ b/source/fitz/load-jpx.c	2016-11-04 12:57:48.026297426 +0100
@@ -3,12 +3,17 @@
 /* Without the definition of OPJ_STATIC, compilation fails on windows
  * due to the use of __stdcall. We believe it is required on some
  * linux toolchains too. */
+
+#ifdef __cplusplus
+extern "C"
+{
 #define OPJ_STATIC
 #ifndef _MSC_VER
 #define OPJ_HAVE_STDINT_H
 #endif
+#endif
 
-#include <openjpeg.h>
+#include <openjpeg-2.1/openjpeg.h>
 
 static void fz_opj_error_callback(const char *msg, void *client_data)
 {
@@ -117,7 +122,7 @@
 	opj_stream_set_read_function(stream, fz_opj_stream_read);
 	opj_stream_set_skip_function(stream, fz_opj_stream_skip);
 	opj_stream_set_seek_function(stream, fz_opj_stream_seek);
-	opj_stream_set_user_data(stream, &sb);
+	opj_stream_set_user_data(stream, &sb, NULL);
 	/* Set the length to avoid an assert */
 	opj_stream_set_user_data_length(stream, size);
 
@@ -249,3 +254,6 @@
 
 	return img;
 }
+#ifdef __cplusplus
+}
+#endif
--- a/source/pdf/pdf-shade.c	2016-04-21 13:14:32.000000000 +0200
+++ b/source/pdf/pdf-shade.c	2016-11-04 12:58:21.594520273 +0100
@@ -206,7 +206,7 @@
 	obj = pdf_dict_get(ctx, dict, PDF_NAME_Decode);
 	if (pdf_array_len(ctx, obj) >= 6)
 	{
-		n = (pdf_array_len(ctx, obj) - 4) / 2;
+		n = fz_mini(FZ_MAX_COLORS, (pdf_array_len(ctx, obj) - 4) / 2);
 		shade->u.m.x0 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 0));
 		shade->u.m.x1 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 1));
 		shade->u.m.y0 = pdf_to_real(ctx, pdf_array_get(ctx, obj, 2));
--- a/source/pdf/pdf-xref.c	2016-04-21 13:14:32.000000000 +0200
+++ b/source/pdf/pdf-xref.c	2016-11-04 12:56:25.369784443 +0100
@@ -1191,8 +1191,14 @@
 				fz_throw(ctx, FZ_ERROR_GENERIC, "object offset out of range: %d (%d 0 R)", (int)entry->ofs, i);
 		}
 		if (entry->type == 'o')
-			if (entry->ofs <= 0 || entry->ofs >= xref_len || pdf_get_xref_entry(ctx, doc, entry->ofs)->type != 'n')
-				fz_throw(ctx, FZ_ERROR_GENERIC, "invalid reference to an objstm that does not exist: %d (%d 0 R)", (int)entry->ofs, i);
+		{
+			/* Read this into a local variable here, because pdf_get_xref_entry
+			 * may solidify the xref, hence invalidating "entry", meaning we
+			 * need a stashed value for the throw. */
+			fz_off_t ofs = entry->ofs;
+			if (ofs <= 0 || ofs >= xref_len || pdf_get_xref_entry(ctx, doc, ofs)->type != 'n')
+				fz_throw(ctx, FZ_ERROR_GENERIC, "invalid reference to an objstm that does not exist: %d (%d 0 R)", (int)ofs, i);
+		}
 	}
 }
 
