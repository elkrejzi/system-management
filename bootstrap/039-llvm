#!/bin/bash -e

. $(dirname $0)/000_shared

proj=(
  cfe
  compiler-rt
  libcxx
  libcxxabi
  libunwind
  openmp
)

cmake_shared=(
  -DCMAKE_INSTALL_PREFIX=/tools
  -DCMAKE_BUILD_TYPE=Release
  -DCLANG_DEFAULT_CXX_STDLIB=libc++
  -DCLANG_DEFAULT_OPENMP_RUNTIME=libomp
  -DCLANG_ENABLE_ARCMT=OFF
  -DCLANG_ENABLE_STATIC_ANALYZER=OFF
  -DCLANG_INCLUDE_TESTS=OFF
  -DCOMPILER_RT_INCLUDE_TESTS=OFF
  -DLLVM_BUILD_LLVM_DYLIB=ON
  -DLLVM_ENABLE_FFI=ON
  -DLLVM_ENABLE_LIBCXXABI=ON
  -DLLVM_ENABLE_RTTI=ON
  -DLLVM_INCLUDE_DOCS=OFF
  -DLLVM_INCLUDE_EXAMPLES=OFF
  -DLLVM_INCLUDE_TESTS=OFF
  -DLLVM_LINK_LLVM_DYLIB=ON
  -DLIBCXX_ENABLE_ASSERTIONS=OFF
  -DLIBCXX_INCLUDE_DOCS=OFF
  -DLIBCXX_INCLUDE_TESTS=OFF
  -DLIBCXXABI_ENABLE_ASSERTIONS=OFF
  -DLIBCXXABI_ENABLE_STATIC=OFF
  -DLIBCXXABI_USE_LLVM_UNWINDER=ON
  -DLIBUNWIND_ENABLE_ASSERTIONS=OFF
  -DLIBUNWIND_ENABLE_SHARED=OFF
  -DLLVM_TARGETS_TO_BUILD="X86"
)

for dir in llvm ${proj[@]}
do
  rm -rf ${dir} ${dir}-${LLVM_VER}.src
done

if [ -z $1 ]
then
  for project in llvm ${proj[@]}
  do
    tar xf ${SROOT}/${project}-${LLVM_VER}.src.tar.xz
    mv ${project}-${LLVM_VER}.src ${project}
  done
fi

for project in llvm ${proj[@]}
do
  if [ ! -d ${project} ]
  then
    if [ -e $HOME/src/git/${project}.tar.xz ] && [ -z ${LLVM_RELEASE_BRANCH} ]
    then
      tar xf $HOME/src/git/${project}.tar.xz
      pushd ${project}
        svn up
      popd
    else
      if [ ! -z ${LLVM_RELEASE_BRANCH} ]
      then
        svn co https://llvm.org/svn/llvm-project/${project}/branches/${LLVM_RELEASE_BRANCH} ${project}
      else
        svn co http://llvm.org/svn/llvm-project/${project}/trunk ${project}
      fi
    fi
  fi

  if [ ${project} == "cfe" ]
  then
    pushd ${project}
      patch -Np1 -i ${PROOT}/clang-runtime.patch
    popd

    mv ${project} llvm/tools/clang
  elif [ ${project} != "cfe" ] && [ ${project} != "llvm" ]
  then
    if [ ${project} == "openmp" ]
    then
      sed -i "/LIBOMP_ALIASES/s#libgomp;##g" ${project}/runtime/src/CMakeLists.txt
    fi

    mv ${project} llvm/projects
  fi
done

pushd llvm
  if [ ! -z $1 ]
  then
    export LLVM_VER=$(grep LLVM_VERSION CMakeLists.txt | grep -o [0-9] | tr "\n" ".")"svn"$(svnversion)
  fi

  sed -i "s:CLANG_HAVE_LIBXML 1:CLANG_HAVE_LIBXML 0:g" tools/clang/CMakeLists.txt

  # remove for 3.9
  /usr/bin/wget https://github.com/llvm-mirror/llvm/commit/991d814755a4cd859708ef92026d6fdd2826644e.patch -O - | patch -Np1 -i -
popd

rm -rf llvm-build llvm-build32 ${LOGDIR}/llvm-${LLVM_VER}.log

install -dm755 llvm-build llvm-build32

{

  time {
  pushd llvm-build
    cmake ${cmake_shared[@]} ../llvm
    make
    make install
  popd

  export CC="gcc -m32"
  export CXX="g++ -m32"

  pushd llvm-build32
    cmake ${cmake_shared[@]} -DLLVM_LIBDIR_SUFFIX=32 -DLLVM_TARGET_ARCH=i686 -DLLVM_DEFAULT_TARGET_TRIPLE=i686-pc-linux-gnu ../llvm
    make -C projects/libcxx

    for dir in libcxx libcxxabi libunwind openmp
    do
      make -C projects/${dir} install
    done
  popd

  pushd llvm
    for arch in i386 x86_64
    do
      /usr/bin/wget -O - http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/${arch}/crtbegin.S | sed "/asm.h/d;/RCSID/d" > crtbegin-${arch}.S
      /usr/bin/wget -O - http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/${arch}/crtend.S | sed "/asm.h/d;/RCSID/d" > crtend-${arch}.S
    done

    install -dm755 /tools/lib/clang/${LLVM_VER%.svn*}/32 /tools/lib/clang/${LLVM_VER%.svn*}/64

    clang -m32 -g -O2 -fno-stack-protector -fpic -c crtbegin-i386.S -o /tools/lib/clang/${LLVM_VER%.svn*}/32/crtbegin.o
    clang -m32 -g -O2 -fno-stack-protector -fpic -DSHARED -c crtbegin-i386.S -o /tools/lib/clang/${LLVM_VER%.svn*}/32/crtbeginS.o
    clang -m32 -g -O2 -fno-stack-protector -fpic -c crtend-i386.S -o /tools/lib/clang/${LLVM_VER%.svn*}/32/crtend.o

    clang -g -O2 -fno-stack-protector -fpic -c crtbegin-x86_64.S -o /tools/lib/clang/${LLVM_VER%.svn*}/64/crtbegin.o
    clang -g -O2 -fno-stack-protector -fpic -DSHARED -c crtbegin-x86_64.S -o /tools/lib/clang/${LLVM_VER%.svn*}/64/crtbeginS.o
    clang -g -O2 -fno-stack-protector -fpic -c crtend-x86_64.S -o /tools/lib/clang/${LLVM_VER%.svn*}/64/crtend.o

    for arch in 32 64
    do
      ln -sf crtbegin.o /tools/lib/clang/${LLVM_VER%.svn*}/${arch}/crtbeginT.o
      ln -sf crtend.o /tools/lib/clang/${LLVM_VER%.svn*}/${arch}/crtendS.o
    done

cat > ${PWD}/crtfastmath.c << "EOF"
/*
 * Copyright (C) 2005-2016 Free Software Foundation, Inc.
 *
 * This file is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 3, or (at your option) any
 * later version.
 * 
 * This file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * Under Section 7 of GPL version 3, you are granted additional
 * permissions described in the GCC Runtime Library Exception, version
 * 3.1, as published by the Free Software Foundation.
 *
 * You should have received a copy of the GNU General Public License and
 * a copy of the GCC Runtime Library Exception along with this program;
 * see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

#ifndef _SOFT_FLOAT
#define MXCSR_DAZ (1 << 6)	/* Enable denormals are zero mode */
#define MXCSR_FTZ (1 << 15)	/* Enable flush to zero mode */

#ifndef __x86_64__
/* All 64-bit targets have SSE and DAZ;
   only check them explicitly for 32-bit ones. */
#include "cpuid.h"

__attribute__ ((target("fxsr,sse")))
static void
/* The i386 ABI only requires 4-byte stack alignment, so this is necessary
   to make sure the fxsave struct gets correct alignment.
   See PR27537 and PR28621.  */
__attribute__ ((force_align_arg_pointer))
set_fast_math_sse (unsigned int edx)
{
  unsigned int mxcsr;
  
  if (edx & bit_FXSAVE)
    {
      /* Check if DAZ is available.  */
      struct
      {
	unsigned short cwd;
	unsigned short swd;
	unsigned short twd;
	unsigned short fop;
	unsigned int fip;
	unsigned int fcs;
	unsigned int foo;
	unsigned int fos;
	unsigned int mxcsr;
	unsigned int mxcsr_mask;
	unsigned int st_space[32];
	unsigned int xmm_space[32];
	unsigned int padding[56];
      } __attribute__ ((aligned (16))) fxsave;

      /* This is necessary since some implementations of FXSAVE
	 do not modify reserved areas within the image.  */
      fxsave.mxcsr_mask = 0;

      __builtin_ia32_fxsave (&fxsave);

      mxcsr = fxsave.mxcsr;

      if (fxsave.mxcsr_mask & MXCSR_DAZ)
	mxcsr |= MXCSR_DAZ;
    }
  else
    mxcsr = __builtin_ia32_stmxcsr ();

  mxcsr |= MXCSR_FTZ;
  __builtin_ia32_ldmxcsr (mxcsr);
}
#endif

static void __attribute__((constructor))
set_fast_math (void)
{
#ifndef __x86_64__
  unsigned int eax, ebx, ecx, edx;

  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))
    return;

  if (edx & bit_SSE)
    set_fast_math_sse (edx);
#else
  unsigned int mxcsr = __builtin_ia32_stmxcsr ();
  mxcsr |= MXCSR_DAZ | MXCSR_FTZ;
  __builtin_ia32_ldmxcsr (mxcsr);
#endif
}
#endif
EOF

    clang -m32 -g -O2 -fno-stack-protector -fpic -c ${PWD}/crtfastmath.c -o /tools/lib/clang/${LLVM_VER%.svn*}/32/crtfastmath.o
    clang -g -O2 -fno-stack-protector -fpic -c ${PWD}/crtfastmath.c -o /tools/lib/clang/${LLVM_VER%.svn*}/64/crtfastmath.o

  popd
  }

} 2>&1 | tee ${LOGDIR}/llvm-${LLVM_VER}.log

[ $PIPESTATUS = 0 ] || exit $PIPESTATUS

rm -rf llvm-build llvm-build32 llvm
