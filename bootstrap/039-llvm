#!/bin/bash -e

. $(dirname $0)/000_shared

proj=(
  cfe
  compiler-rt
  libcxx
  libcxxabi
  libunwind
  openmp
)

cmake_shared=(
  -DCMAKE_INSTALL_PREFIX=/tools
  -DCMAKE_BUILD_TYPE=Release
  -DCLANG_DEFAULT_CXX_STDLIB=libc++
  -DCLANG_DEFAULT_OPENMP_RUNTIME=libomp
  -DCLANG_ENABLE_ARCMT=OFF
  -DCLANG_ENABLE_STATIC_ANALYZER=OFF
  -DCLANG_INCLUDE_TESTS=OFF
  -DCOMPILER_RT_INCLUDE_TESTS=OFF
  -DLLVM_BUILD_LLVM_DYLIB=ON
  -DLLVM_ENABLE_FFI=ON
  -DLLVM_ENABLE_LIBCXXABI=ON
  -DLLVM_ENABLE_RTTI=ON
  -DLLVM_INCLUDE_DOCS=OFF
  -DLLVM_INCLUDE_EXAMPLES=OFF
  -DLLVM_INCLUDE_TESTS=OFF
  -DLLVM_LINK_LLVM_DYLIB=ON
  -DLIBCXX_ENABLE_ASSERTIONS=OFF
  -DLIBCXX_INCLUDE_DOCS=OFF
  -DLIBCXX_INCLUDE_TESTS=OFF
  -DLIBCXXABI_ENABLE_ASSERTIONS=OFF
  -DLIBCXXABI_ENABLE_STATIC=OFF
  -DLIBCXXABI_USE_LLVM_UNWINDER=ON
  -DLIBUNWIND_ENABLE_ASSERTIONS=OFF
  -DLIBUNWIND_ENABLE_SHARED=OFF
  -DLLVM_TARGETS_TO_BUILD="X86"
)

for dir in llvm ${proj[@]}
do
  rm -rf ${dir} ${dir}-${LLVM_VER}.src
done

if [ -z $1 ]
then
  for project in llvm ${proj[@]}
  do
    tar xf ${SROOT}/${project}-${LLVM_VER}.src.tar.xz
    mv ${project}-${LLVM_VER}.src ${project}
  done
fi

for project in llvm ${proj[@]}
do
  if [ ! -d ${project} ]
  then
    if [ -e $HOME/src/git/${project}.tar.xz ] && [ -z ${LLVM_RELEASE_BRANCH} ]
    then
      tar xf $HOME/src/git/${project}.tar.xz
      pushd ${project}
        svn up
      popd
    else
      if [ ! -z ${LLVM_RELEASE_BRANCH} ]
      then
        svn co https://llvm.org/svn/llvm-project/${project}/branches/${LLVM_RELEASE_BRANCH} ${project}
      else
        svn co http://llvm.org/svn/llvm-project/${project}/trunk ${project}
      fi
    fi
  fi

  if [ ${project} == "cfe" ]
  then
    pushd ${project}
      patch -Np1 -i ${PROOT}/clang-runtime.patch
    popd

    mv ${project} llvm/tools/clang
  elif [ ${project} != "cfe" ] && [ ${project} != "llvm" ]
  then
    if [ ${project} == "openmp" ]
    then
      sed -i "/LIBOMP_ALIASES/s#libgomp;##g" ${project}/runtime/src/CMakeLists.txt
    fi

    mv ${project} llvm/projects
  fi
done

pushd llvm
  if [ ! -z $1 ]
  then
    export LLVM_VER=$(grep LLVM_VERSION CMakeLists.txt | grep -o [0-9] | tr "\n" ".")"svn"$(svnversion)
  fi

  sed -i "s:CLANG_HAVE_LIBXML 1:CLANG_HAVE_LIBXML 0:g" tools/clang/CMakeLists.txt
popd

rm -rf llvm-build llvm-build32 ${LOGDIR}/llvm-${LLVM_VER}.log

install -dm755 llvm-build llvm-build32

{

  time {
  pushd llvm-build
    cmake ${cmake_shared[@]} ../llvm
    make
    make install
  popd

  export CC="gcc -m32"
  export CXX="g++ -m32"

  pushd llvm-build32
    cmake ${cmake_shared[@]} -DLLVM_LIBDIR_SUFFIX=32 -DLLVM_TARGET_ARCH=i686 -DLLVM_DEFAULT_TARGET_TRIPLE=i686-pc-linux-gnu ../llvm
    make -C projects/libcxx

    for dir in libcxx libcxxabi libunwind openmp
    do
      make -C projects/${dir} install
    done
  popd

  pushd llvm
    for arch in i386 x86_64
    do
      if [ ${arch} == "i386" ]
      then
        CCARGS="-m32"
        LIB="lib32"
      else
        CCARGS=""
        LIB="lib"
      fi

      /usr/bin/wget -O - http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/${arch}/crtbegin.S | sed "/asm.h/d;/RCSID/d" > crtbegin-${arch}.S
      /usr/bin/wget -O - http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/${arch}/crtend.S | sed "/asm.h/d;/RCSID/d" > crtend-${arch}.S
      /usr/bin/wget "https://gcc.gnu.org/viewcvs/gcc/trunk/libgcc/config/i386/crtfastmath.c?revision=232055&view=co" -O crtfastmath-${arch}.c

      install -dm755 /tools/lib/clang/${LLVM_VER%.svn*}/${arch} /tools/lib/clang/${LLVM_VER%.svn*}/lib/linux/${arch}

      clang ${CCARGS} -g -O2 -fno-stack-protector -fpic -c crtbegin-${arch}.S -o /tools/lib/clang/${LLVM_VER%.svn*}/${arch}/crtbegin.o
      clang ${CCARGS} -g -O2 -fno-stack-protector -fpic -DSHARED -c crtbegin-${arch}.S -o /tools/lib/clang/${LLVM_VER%.svn*}/${arch}/crtbeginS.o
      clang ${CCARGS} -g -O2 -fno-stack-protector -fpic -c crtend-${arch}.S -o /tools/lib/clang/${LLVM_VER%.svn*}/${arch}/crtend.o

      clang ${CCARGS} -g -O2 -fno-stack-protector -fpic -c crtfastmath-${arch}.c -o /tools/lib/clang/${LLVM_VER%.svn*}/${arch}/crtfastmath.o

      ln -sf crtbegin.o /tools/lib/clang/${LLVM_VER%.svn*}/${arch}/crtbeginT.o
      ln -sf crtend.o /tools/lib/clang/${LLVM_VER%.svn*}/${arch}/crtendS.o

      mv /tools/lib/clang/${LLVM_VER%.svn*}/lib/linux/libclang_rt.builtins-${arch}.a /tools/lib/clang/${LLVM_VER%.svn*}/lib/linux/${arch}/
      mv /tools/${LIB}/libunwind.a /tools/lib/clang/${LLVM_VER%.svn*}/${arch}/

      ln -sf ../lib/linux/libclang_rt.builtins-${arch}.a /tools/lib/clang/${LLVM_VER%.svn*}/${arch}/libclang_rt.builtins-${arch}.a

cat > /tools/lib/clang/${LLVM_VER%.svn*}/lib/linux/libclang_rt.builtins-${arch}.a << EOF
INPUT ( /tools/lib/clang/${LLVM_VER%.svn*}/lib/linux/${arch}/libclang_rt.builtins-${arch}.a AS_NEEDED ( /tools/${LIB}/libunwind.a -lm ) )
EOF

cat > /tools/${LIB}/libunwind.a << EOF
INPUT ( /tools/lib/clang/${LLVM_VER%.svn*}/${arch}/libunwind.a AS_NEEDED ( -lpthread -ldl ) )
EOF
    done

  popd
  }

} 2>&1 | tee ${LOGDIR}/llvm-${LLVM_VER}.log

[ $PIPESTATUS = 0 ] || exit $PIPESTATUS

rm -rf llvm-build llvm-build32 llvm
