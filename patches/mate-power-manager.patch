diff -Naur a/data/org.mate.power-manager.gschema.xml.in b/data/org.mate.power-manager.gschema.xml.in
--- a/data/org.mate.power-manager.gschema.xml.in	2014-01-20 19:40:23.000000000 +0100
+++ b/data/org.mate.power-manager.gschema.xml.in	2014-04-27 00:16:56.846905434 +0200
@@ -211,11 +211,6 @@
       <_summary>Seconds of inactivity to spin down when on battery</_summary>
       <_description>The number of seconds of inactivity to spin down the disks when on battery power.</_description>
     </key>
-    <key name="notify-perhaps-recall" type="b">
-      <default>true</default>
-      <_summary>If we should show the recalled battery warning for a broken battery</_summary>
-      <_description>If we should show the recalled battery warning for a broken battery. Set this to false only if you know your battery is okay.</_description>
-    </key>
     <key name="notify-low-capacity" type="b">
       <default>true</default>
       <_summary>If we should show the low capacity warning for a broken battery</_summary>
diff -Naur a/src/gpm-backlight.c b/src/gpm-backlight.c
--- a/src/gpm-backlight.c	2014-01-20 19:40:30.000000000 +0100
+++ b/src/gpm-backlight.c	2014-04-27 00:16:56.847905453 +0200
@@ -410,7 +410,11 @@
  * Does the actions when the ac power source is inserted/removed.
  **/
 static void
+#if UP_CHECK_VERSION(0, 99, 0)
+gpm_backlight_client_changed_cb (UpClient *client, GParamSpec *pspec, GpmBacklight *backlight)
+#else
 gpm_backlight_client_changed_cb (UpClient *client, GpmBacklight *backlight)
+#endif
 {
 	gpm_backlight_brightness_evaluate_and_set (backlight, FALSE, TRUE);
 }
@@ -727,8 +731,13 @@
 
 	/* we use up_client for the ac-adapter-changed signal */
 	backlight->priv->client = up_client_new ();
+#if UP_CHECK_VERSION(0, 99, 0)
+	g_signal_connect (backlight->priv->client, "notify",
+			  G_CALLBACK (gpm_backlight_client_changed_cb), backlight);
+#else
 	g_signal_connect (backlight->priv->client, "changed",
 			  G_CALLBACK (gpm_backlight_client_changed_cb), backlight);
+#endif
 
 	/* gets caps */
 	backlight->priv->can_dim = gpm_brightness_has_hw (backlight->priv->brightness);
diff -Naur a/src/gpm-button.c b/src/gpm-button.c
--- a/src/gpm-button.c	2013-08-02 01:00:42.000000000 +0200
+++ b/src/gpm-button.c	2014-04-27 00:16:56.847905453 +0200
@@ -324,7 +324,11 @@
  * gpm_button_client_changed_cb
  **/
 static void
+#if UP_CHECK_VERSION(0, 99, 0)
+gpm_button_client_changed_cb (UpClient *client, GParamSpec *pspec, GpmButton *button)
+#else
 gpm_button_client_changed_cb (UpClient *client, GpmButton *button)
+#endif
 {
 	gboolean lid_is_closed;
 
@@ -363,9 +367,13 @@
 
 	button->priv->client = up_client_new ();
 	button->priv->lid_is_closed = up_client_get_lid_is_closed (button->priv->client);
+#if UP_CHECK_VERSION(0, 99, 0)
+	g_signal_connect (button->priv->client, "notify",
+			  G_CALLBACK (gpm_button_client_changed_cb), button);
+#else
 	g_signal_connect (button->priv->client, "changed",
 			  G_CALLBACK (gpm_button_client_changed_cb), button);
-
+#endif
 	/* register the brightness keys */
 	gpm_button_xevent_key (button, XF86XK_PowerOff, GPM_BUTTON_POWER);
 #ifdef HAVE_XF86XK_SUSPEND
diff -Naur a/src/gpm-common.h b/src/gpm-common.h
--- a/src/gpm-common.h	2013-08-02 01:00:42.000000000 +0200
+++ b/src/gpm-common.h	2014-04-27 00:16:56.847905453 +0200
@@ -33,6 +33,7 @@
 #define	GPM_DBUS_SERVICE		"org.mate.PowerManager"
 #define	GPM_DBUS_INTERFACE		"org.mate.PowerManager"
 #define	GPM_DBUS_INTERFACE_BACKLIGHT	"org.mate.PowerManager.Backlight"
+#define	GPM_DBUS_INTERFACE_KBD_BACKLIGHT	"org.mate.PowerManager.KbdBacklight"
 #define	GPM_DBUS_PATH			"/org/mate/PowerManager"
 #define	GPM_DBUS_PATH_BACKLIGHT		"/org/mate/PowerManager/Backlight"
 #define GPM_DBUS_PATH_KBD_BACKLIGHT    "/org/mate/PowerManager/KbdBacklight"
@@ -97,7 +98,6 @@
 #define GPM_SETTINGS_SPINDOWN_TIMEOUT_BATT		"spindown-timeout-battery"
 
 /* notify */
-#define GPM_SETTINGS_NOTIFY_PERHAPS_RECALL		"notify-perhaps-recall"
 #define GPM_SETTINGS_NOTIFY_LOW_CAPACITY		"notify-low-capacity"
 #define GPM_SETTINGS_NOTIFY_DISCHARGING			"notify-discharging"
 #define GPM_SETTINGS_NOTIFY_FULLY_CHARGED		"notify-fully-charged"
diff -Naur a/src/gpm-control.c b/src/gpm-control.c
--- a/src/gpm-control.c	2014-03-01 12:40:24.000000000 +0100
+++ b/src/gpm-control.c	2014-04-27 00:16:56.847905453 +0200
@@ -289,10 +289,11 @@
 		}
 		g_object_unref(proxy);
 	}
+#if !UP_CHECK_VERSION(0, 99, 0)
 	else {
 		ret = up_client_suspend_sync (control->priv->client, NULL, error);
 	}
-
+#endif
 	egg_debug ("emitting resume");
 	g_signal_emit (control, signals [RESUME], 0, GPM_CONTROL_ACTION_SUSPEND);
 
@@ -399,10 +400,11 @@
 			ret = TRUE;
 		}
 	}
+#if !UP_CHECK_VERSION(0, 99, 0)
 	else {
 		ret = up_client_hibernate_sync (control->priv->client, NULL, error);
 	}
-
+#endif
 	egg_debug ("emitting resume");
 	g_signal_emit (control, signals [RESUME], 0, GPM_CONTROL_ACTION_HIBERNATE);
 
diff -Naur a/src/gpm-engine.c b/src/gpm-engine.c
--- a/src/gpm-engine.c	2013-03-15 21:03:43.000000000 +0100
+++ b/src/gpm-engine.c	2014-04-27 00:17:44.844788760 +0200
@@ -72,7 +72,6 @@
 	CHARGE_ACTION,
 	DISCHARGING,
 	LOW_CAPACITY,
-	PERHAPS_RECALL,
 	LAST_SIGNAL
 };
 
@@ -83,6 +82,31 @@
 
 static UpDevice *gpm_engine_get_composite_device (GpmEngine *engine, UpDevice *original_device);
 static UpDevice *gpm_engine_update_composite_device (GpmEngine *engine, UpDevice *original_device);
+#if UP_CHECK_VERSION (0, 99, 0)
+static void gpm_engine_device_changed_cb (UpDevice *device, GParamSpec *pspec, GpmEngine *engine);
+
+#define GPM_ENGINE_WARNING_NONE UP_DEVICE_LEVEL_NONE
+#define GPM_ENGINE_WARNING_DISCHARGING UP_DEVICE_LEVEL_DISCHARGING
+#define GPM_ENGINE_WARNING_LOW UP_DEVICE_LEVEL_LOW
+#define GPM_ENGINE_WARNING_CRITICAL UP_DEVICE_LEVEL_CRITICAL
+#define GPM_ENGINE_WARNING_ACTION UP_DEVICE_LEVEL_ACTION
+
+/**
+ * gpm_engine_get_warning:
+ *
+ * This gets the possible engine state for the device according to the
+ * policy, which could be per-percent, or per-time.
+ *
+ * Return value: A GpmEngine state, e.g. GPM_ENGINE_WARNING_DISCHARGING
+ **/
+static UpDeviceLevel
+gpm_engine_get_warning (GpmEngine *engine, UpDevice *device)
+{
+	UpDeviceLevel warning;
+	g_object_get (device, "warning-level", &warning, NULL);
+	return warning;
+}
+#else
 
 typedef enum {
 	GPM_ENGINE_WARNING_NONE = 0,
@@ -224,6 +248,7 @@
  out:
 	return warning_type;
 }
+#endif
 
 /**
  * gpm_engine_get_summary:
@@ -280,12 +305,20 @@
  * Returns the icon
  **/
 static gchar *
+#if UP_CHECK_VERSION (0, 99, 0)
+gpm_engine_get_icon_priv (GpmEngine *engine, UpDeviceKind device_kind, UpDeviceLevel warning, gboolean use_state)
+#else
 gpm_engine_get_icon_priv (GpmEngine *engine, UpDeviceKind device_kind, GpmEngineWarning warning, gboolean use_state)
+#endif
 {
 	guint i;
 	GPtrArray *array;
 	UpDevice *device;
+#if UP_CHECK_VERSION (0, 99, 0)
+	UpDeviceLevel warning_temp;
+#else
 	GpmEngineWarning warning_temp;
+#endif
 	UpDeviceKind kind;
 	UpDeviceState state;
 	gboolean is_present;
@@ -570,6 +603,9 @@
 static UpDevice *
 gpm_engine_get_composite_device (GpmEngine *engine, UpDevice *original_device)
 {
+#if UP_CHECK_VERSION (0, 99, 0)
+	return engine->priv->battery_composite;
+#else
 	guint battery_devices = 0;
 	GPtrArray *array;
 	UpDevice *device;
@@ -599,6 +635,7 @@
 out:
 	/* return composite device or original device */
 	return device;
+#endif
 }
 
 /**
@@ -607,6 +644,18 @@
 static UpDevice *
 gpm_engine_update_composite_device (GpmEngine *engine, UpDevice *original_device)
 {
+#if UP_CHECK_VERSION (0, 99, 0)
+	gchar *text;
+
+	text = up_device_to_text (engine->priv->battery_composite);
+	egg_debug ("composite:\n%s", text);
+	g_free (text);
+
+	/* force update of icon */
+	gpm_engine_recalculate_state_icon (engine);
+
+	return engine->priv->battery_composite;
+#else
 	guint i;
 	gdouble percentage = 0.0;
 	gdouble energy = 0.0;
@@ -718,6 +767,7 @@
 out:
 	/* return composite device or original device */
 	return device;
+#endif
 }
 
 /**
@@ -726,7 +776,11 @@
 static void
 gpm_engine_device_add (GpmEngine *engine, UpDevice *device)
 {
+#if UP_CHECK_VERSION (0, 99, 0)
+	UpDeviceLevel warning;
+#else
 	GpmEngineWarning warning;
+#endif
 	UpDeviceState state;
 	UpDeviceKind kind;
 	UpDevice *composite;
@@ -758,42 +812,13 @@
 		g_object_get (composite, "state", &state, NULL);
 		g_object_set_data (G_OBJECT(composite), "engine-state-old", GUINT_TO_POINTER(state));
 	}
-}
 
-/**
- * gpm_engine_check_recall:
- **/
-static gboolean
-gpm_engine_check_recall (GpmEngine *engine, UpDevice *device)
-{
-	UpDeviceKind kind;
-	gboolean recall_notice = FALSE;
-	gchar *recall_vendor = NULL;
-	gchar *recall_url = NULL;
-
-	/* get device properties */
-	g_object_get (device,
-		      "kind", &kind,
-		      "recall-notice", &recall_notice,
-		      "recall-vendor", &recall_vendor,
-		      "recall-url", &recall_url,
-		      NULL);
-
-	/* not battery */
-	if (kind != UP_DEVICE_KIND_BATTERY)
-		goto out;
-
-	/* no recall data */
-	if (!recall_notice)
-		goto out;
+#if UP_CHECK_VERSION (0, 99, 0)
+	g_signal_connect (device, "notify", G_CALLBACK (gpm_engine_device_changed_cb), engine);
+	g_ptr_array_add (engine->priv->array, g_object_ref (device));
+	gpm_engine_recalculate_state (engine);
+#endif
 
-	/* emit signal for manager */
-	egg_debug ("** EMIT: perhaps-recall");
-	g_signal_emit (engine, signals [PERHAPS_RECALL], 0, device, recall_vendor, recall_url);
-out:
-	g_free (recall_vendor);
-	g_free (recall_url);
-	return recall_notice;
 }
 
 /**
@@ -805,12 +830,14 @@
 	guint i;
 	GPtrArray *array = NULL;
 	UpDevice *device;
+#if !UP_CHECK_VERSION(0, 99, 0)
 	gboolean ret;
 	GError *error = NULL;
+#endif
 
 	g_return_val_if_fail (engine != NULL, FALSE);
 	g_return_val_if_fail (GPM_IS_ENGINE (engine), FALSE);
-
+#if !UP_CHECK_VERSION(0, 99, 0)
 	/* get devices from UPower */
 	ret = up_client_enumerate_devices_sync (engine->priv->client, NULL, &error);
 	if (!ret) {
@@ -818,7 +845,7 @@
 		g_error_free (error);
 		goto out;
 	}
-
+#endif
 	/* connected mobile phones */
 	gpm_phone_coldplug (engine->priv->phone);
 
@@ -829,9 +856,10 @@
 	for (i=0;i<array->len;i++) {
 		device = g_ptr_array_index (array, i);
 		gpm_engine_device_add (engine, device);
-		gpm_engine_check_recall (engine, device);
 	}
+#if !UP_CHECK_VERSION(0, 99, 0)
 out:
+#endif
 	if (array != NULL)
 		g_ptr_array_unref (array);
 	/* never repeat */
@@ -844,17 +872,36 @@
 static void
 gpm_engine_device_added_cb (UpClient *client, UpDevice *device, GpmEngine *engine)
 {
+#if UP_CHECK_VERSION (0, 99, 0)
+	gpm_engine_device_add (engine, device);
+#else
 	/* add to list */
 	g_ptr_array_add (engine->priv->array, g_object_ref (device));
-	gpm_engine_check_recall (engine, device);
 
 	gpm_engine_recalculate_state (engine);
+#endif
 }
 
 /**
  * gpm_engine_device_removed_cb:
  **/
 static void
+#if UP_CHECK_VERSION(0, 99, 0)
+gpm_engine_device_removed_cb (UpClient *client, const char *object_path, GpmEngine *engine)
+{
+	guint i;
+
+	for (i = 0; i < engine->priv->array->len; i++) {
+		UpDevice *device = g_ptr_array_index (engine->priv->array, i);
+
+		if (g_strcmp0 (object_path, up_device_get_object_path (device)) == 0) {
+			g_ptr_array_remove_index (engine->priv->array, i);
+			break;
+		}
+	}
+	gpm_engine_recalculate_state (engine);
+}
+#else
 gpm_engine_device_removed_cb (UpClient *client, UpDevice *device, GpmEngine *engine)
 {
 	gboolean ret;
@@ -863,19 +910,28 @@
 		return;
 	gpm_engine_recalculate_state (engine);
 }
-
+#endif
 
 /**
  * gpm_engine_device_changed_cb:
  **/
 static void
+#if UP_CHECK_VERSION(0, 99, 0)
+gpm_engine_device_changed_cb (UpDevice *device, GParamSpec *pspec, GpmEngine *engine)
+#else
 gpm_engine_device_changed_cb (UpClient *client, UpDevice *device, GpmEngine *engine)
+#endif
 {
 	UpDeviceKind kind;
 	UpDeviceState state;
 	UpDeviceState state_old;
+#if UP_CHECK_VERSION(0, 99, 0)
+	UpDeviceLevel warning_old;
+	UpDeviceLevel warning;
+#else
 	GpmEngineWarning warning_old;
 	GpmEngineWarning warning;
+#endif
 
 	/* get device properties */
 	g_object_get (device,
@@ -1042,7 +1098,10 @@
 static void
 gpm_engine_init (GpmEngine *engine)
 {
-
+#if UP_CHECK_VERSION(0, 99, 0)
+	GPtrArray *array = NULL;
+	guint i;
+#endif
 	engine->priv = GPM_ENGINE_GET_PRIVATE (engine);
 
 	engine->priv->array = g_ptr_array_new_with_free_func (g_object_unref);
@@ -1051,8 +1110,10 @@
 			  G_CALLBACK (gpm_engine_device_added_cb), engine);
 	g_signal_connect (engine->priv->client, "device-removed",
 			  G_CALLBACK (gpm_engine_device_removed_cb), engine);
+#if !UP_CHECK_VERSION(0, 99, 0)
 	g_signal_connect (engine->priv->client, "device-changed",
 			  G_CALLBACK (gpm_engine_device_changed_cb), engine);
+#endif
 
 	engine->priv->settings = g_settings_new (GPM_SETTINGS_SCHEMA);
 	g_signal_connect (engine->priv->settings, "changed",
@@ -1067,6 +1128,11 @@
 			  G_CALLBACK (phone_device_refresh_cb), engine);
 
 	/* create a fake virtual composite battery */
+#if UP_CHECK_VERSION(0, 99, 0)
+	engine->priv->battery_composite = up_client_get_display_device (engine->priv->client);
+	g_signal_connect (engine->priv->battery_composite, "notify",
+			  G_CALLBACK (gpm_engine_device_changed_cb), engine);
+#else
 	engine->priv->battery_composite = up_device_new ();
 	g_object_set (engine->priv->battery_composite,
 		      "kind", UP_DEVICE_KIND_BATTERY,
@@ -1075,6 +1141,7 @@
 		      "power-supply", TRUE,
 		      "is-present", TRUE,
 		      NULL);
+#endif
 
 	engine->priv->previous_icon = NULL;
 	engine->priv->previous_summary = NULL;
@@ -1134,14 +1201,6 @@
 			      G_STRUCT_OFFSET (GpmEngineClass, low_capacity),
 			      NULL, NULL, g_cclosure_marshal_VOID__POINTER,
 			      G_TYPE_NONE, 1, G_TYPE_POINTER);
-	signals [PERHAPS_RECALL] =
-		g_signal_new ("perhaps-recall",
-			      G_TYPE_FROM_CLASS (object_class),
-			      G_SIGNAL_RUN_LAST,
-			      G_STRUCT_OFFSET (GpmEngineClass, perhaps_recall),
-			      NULL, NULL, gpm_marshal_VOID__POINTER_STRING_STRING,
-			      G_TYPE_NONE,
-			      3, G_TYPE_POINTER, G_TYPE_STRING, G_TYPE_STRING);
 	signals [FULLY_CHARGED] =
 		g_signal_new ("fully-charged",
 			      G_TYPE_FROM_CLASS (object_class),
diff -Naur a/src/gpm-engine.h b/src/gpm-engine.h
--- a/src/gpm-engine.h	2013-03-15 21:03:43.000000000 +0100
+++ b/src/gpm-engine.h	2014-04-27 00:16:56.848905471 +0200
@@ -49,10 +49,6 @@
 						 gchar		*icon);
 	void		(* summary_changed)	(GpmEngine	*engine,
 						 gchar		*status);
-	void		(* perhaps_recall)	(GpmEngine	*engine,
-						 UpDevice	*device,
-						 const gchar	*oem_vendor,
-						 const gchar	*website);
 	void		(* low_capacity)	(GpmEngine	*engine,
 						 UpDevice	*device);
 	void		(* charge_low)		(GpmEngine	*engine,
diff -Naur a/src/gpm-kbd-backlight.c b/src/gpm-kbd-backlight.c
--- a/src/gpm-kbd-backlight.c	2014-01-20 19:40:30.000000000 +0100
+++ b/src/gpm-kbd-backlight.c	2014-04-27 00:16:56.848905471 +0200
@@ -31,21 +31,6 @@
 #include "gpm-kbd-backlight.h"
 #include "gsd-media-keys-window.h"
 
-static const gchar *kbd_backlight_introspection = ""
-"<?xml version=\"1.0\" encoding=\"UTF-8\"?>""<node name=\"/\">"
-  "<interface name=\"org.mate.PowerManager.Backlight\">"
-    "<method name=\"GetBrightness\">"
-      "<arg type=\"u\" name=\"percentage_brightness\" direction=\"out\"/>"
-    "</method>"
-    "<method name=\"SetBrightness\">"
-      "<arg type=\"u\" name=\"percentage_brightness\" direction=\"in\"/>"
-    "</method>"
-    "<signal name=\"BrightnessChanged\">"
-      "<arg type=\"u\" name=\"percentage_brightness\" direction=\"out\"/>"
-    "</signal>"
-  "</interface>"
-"</node>";
-
 #define GPM_KBD_BACKLIGHT_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GPM_TYPE_KBD_BACKLIGHT, GpmKbdBacklightPrivate))
 
 struct GpmKbdBacklightPrivate
@@ -128,6 +113,9 @@
    guint goal;
 
    g_return_val_if_fail (GPM_IS_KBD_BACKLIGHT (backlight), FALSE);
+   /* avoid warnings if no keyboard brightness is available */
+   if (backlight->priv->max_brightness < 1)
+       return FALSE;
    /* if we're setting the same we are, don't bother */
    //g_return_val_if_fail (backlight->priv->brightness_percent != percentage, FALSE);
 
@@ -430,40 +418,6 @@
    return FALSE;
 }
 
-/**
- * gpm_kbd_backlight_register_dbus:
- * @backlight:
- * @connection:
- * @error:
- **/
-void
-gpm_kbd_backlight_register_dbus (GpmKbdBacklight *backlight,
-                GDBusConnection *connection,
-                GError **error)
-{
-   GDBusNodeInfo *node_info;
-   GDBusInterfaceInfo *interface_info;
-   GDBusInterfaceVTable interface_vtable = {
-           gpm_kbd_backlight_dbus_method_call,
-           gpm_kbd_backlight_dbus_property_get,
-           gpm_kbd_backlight_dbus_property_set
-   };
-
-   node_info = g_dbus_node_info_new_for_xml (kbd_backlight_introspection, NULL);
-   interface_info = g_dbus_node_info_lookup_interface (node_info, GPM_DBUS_INTERFACE_BACKLIGHT);
-
-   backlight->priv->bus_connection = g_object_ref (connection);
-   backlight->priv->bus_object_id =
-       g_dbus_connection_register_object (connection,
-                          GPM_DBUS_PATH_KBD_BACKLIGHT,
-                          interface_info,
-                          &interface_vtable,
-                          backlight,
-                          NULL,
-                          error);
-   g_dbus_node_info_unref (node_info);
-}
-
 static gboolean
 gpm_kbd_backlight_evaluate_power_source_and_set (GpmKbdBacklight *backlight)
 {
@@ -532,6 +486,9 @@
  **/
 static void
 gpm_kbd_backlight_client_changed_cb (UpClient *client,
+#if UP_CHECK_VERSION(0, 99, 0)
+                    GParamSpec *pspec,
+#endif
                     GpmKbdBacklight *backlight)
 {
    gpm_kbd_backlight_evaluate_power_source_and_set (backlight);
@@ -801,8 +758,13 @@
 
    /* Use upower for ac changed signal */
    backlight->priv->client = up_client_new ();
+#if UP_CHECK_VERSION(0, 99, 0)
+   g_signal_connect (backlight->priv->client, "notify",
+             G_CALLBACK (gpm_kbd_backlight_client_changed_cb), backlight);
+#else
    g_signal_connect (backlight->priv->client, "changed",
              G_CALLBACK (gpm_kbd_backlight_client_changed_cb), backlight);
+#endif
 
     backlight->priv->settings = g_settings_new (GPM_SETTINGS_SCHEMA);
 	//g_signal_connect (backlight->priv->settings, "changed", G_CALLBACK (gpm_settings_key_changed_cb), backlight);
diff -Naur a/src/gpm-manager.c b/src/gpm-manager.c
--- a/src/gpm-manager.c	2013-12-16 23:01:29.000000000 +0100
+++ b/src/gpm-manager.c	2014-04-27 00:17:44.845788779 +0200
@@ -63,11 +63,11 @@
 #include "gpm-disks.h"
 
 #include "org.mate.PowerManager.Backlight.h"
+#include "org.mate.PowerManager.KbdBacklight.h"
 
 static void     gpm_manager_finalize	(GObject	 *object);
 
 #define GPM_MANAGER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GPM_TYPE_MANAGER, GpmManagerPrivate))
-#define GPM_MANAGER_RECALL_DELAY		30 /* seconds */
 #define GPM_MANAGER_NOTIFY_TIMEOUT_NEVER	0 /* ms */
 #define GPM_MANAGER_NOTIFY_TIMEOUT_SHORT	10 * 1000 /* ms */
 #define GPM_MANAGER_NOTIFY_TIMEOUT_LONG		30 * 1000 /* ms */
@@ -971,7 +971,11 @@
  * gpm_manager_client_changed_cb:
  **/
 static void
+#if UP_CHECK_VERSION(0, 99, 0)
+gpm_manager_client_changed_cb (UpClient *client, GParamSpec *pspec, GpmManager *manager)
+#else
 gpm_manager_client_changed_cb (UpClient *client, GpmManager *manager)
+#endif
 {
 	gboolean event_when_closed;
 	gint timeout;
@@ -1091,111 +1095,6 @@
 }
 
 /**
- * gpm_manager_perhaps_recall_response_cb:
- */
-static void
-gpm_manager_perhaps_recall_response_cb (GtkDialog *dialog, gint response_id, GpmManager *manager)
-{
-	GdkScreen *screen;
-	GtkWidget *dialog_error;
-	GError *error = NULL;
-	gboolean ret;
-	const gchar *website;
-
-	/* don't show this again */
-	if (response_id == GTK_RESPONSE_CANCEL) {
-		g_settings_set_boolean (manager->priv->settings, GPM_SETTINGS_NOTIFY_PERHAPS_RECALL, FALSE);
-		goto out;
-	}
-
-	/* visit recall website */
-	if (response_id == GTK_RESPONSE_OK) {
-		screen = gdk_screen_get_default();
-		website = (const gchar *) g_object_get_data (G_OBJECT (manager), "recall-oem-website");
-		ret = gtk_show_uri (screen, website, gtk_get_current_event_time (), &error);
-		if (!ret) {
-			dialog_error = gtk_message_dialog_new (NULL, GTK_DIALOG_MODAL, GTK_MESSAGE_INFO, GTK_BUTTONS_OK,
-							       "Failed to show url %s", error->message);
-			gtk_dialog_run (GTK_DIALOG (dialog_error));
-			g_error_free (error);
-		}
-		goto out;
-	}
-out:
-	gtk_widget_destroy (GTK_WIDGET (dialog));
-	return;
-}
-
-/**
- * gpm_manager_perhaps_recall_delay_cb:
- */
-static gboolean
-gpm_manager_perhaps_recall_delay_cb (GpmManager *manager)
-{
-	const gchar *oem_vendor;
-	gchar *title = NULL;
-	gchar *message = NULL;
-	GtkWidget *dialog;
-
-	oem_vendor = (const gchar *) g_object_get_data (G_OBJECT (manager), "recall-oem-vendor");
-
-	/* TRANSLATORS: the battery may be recalled by it's vendor */
-	title = g_strdup_printf ("%s: %s", GPM_NAME, _("Battery may be recalled"));
-	message = g_strdup_printf (_("A battery in your computer may have been "
-				     "recalled by %s and you may be at risk.\n\n"
-				     "For more information visit the battery recall website."), oem_vendor);
-	dialog = gtk_message_dialog_new_with_markup (NULL, GTK_DIALOG_DESTROY_WITH_PARENT,
-						     GTK_MESSAGE_INFO, GTK_BUTTONS_CLOSE,
-						     "<span size='larger'><b>%s</b></span>", title);
-
-	gtk_message_dialog_format_secondary_markup (GTK_MESSAGE_DIALOG (dialog), "%s", message);
-
-	/* TRANSLATORS: button text, visit the manufacturers recall website */
-	gtk_dialog_add_button (GTK_DIALOG (dialog), _("Visit recall website"), GTK_RESPONSE_OK);
-
-	/* TRANSLATORS: button text, do not show this bubble again */
-	gtk_dialog_add_button (GTK_DIALOG (dialog), _("Do not show me this again"), GTK_RESPONSE_CANCEL);
-
-	/* wait async for response */
-	gtk_widget_show (dialog);
-	g_signal_connect (dialog, "response", G_CALLBACK (gpm_manager_perhaps_recall_response_cb), manager);
-
-	g_free (title);
-	g_free (message);
-
-	/* never repeat */
-	return FALSE;
-}
-
-/**
- * gpm_manager_engine_perhaps_recall_cb:
- */
-static void
-gpm_manager_engine_perhaps_recall_cb (GpmEngine *engine, UpDevice *device, gchar *oem_vendor, gchar *website, GpmManager *manager)
-{
-	gboolean ret;
-
-	/* don't show when running under GDM */
-	if (g_getenv ("RUNNING_UNDER_GDM") != NULL) {
-		egg_debug ("running under gdm, so no notification");
-		return;
-	}
-
-	/* already shown, and dismissed */
-	ret = g_settings_get_boolean (manager->priv->settings, GPM_SETTINGS_NOTIFY_PERHAPS_RECALL);
-	if (!ret) {
-		egg_debug ("Gsettings prevents notification: %s", GPM_SETTINGS_NOTIFY_PERHAPS_RECALL);
-		return;
-	}
-
-	g_object_set_data_full (G_OBJECT (manager), "recall-oem-vendor", (gpointer) g_strdup (oem_vendor), (GDestroyNotify) g_free);
-	g_object_set_data_full (G_OBJECT (manager), "recall-oem-website", (gpointer) g_strdup (website), (GDestroyNotify) g_free);
-
-	/* delay by a few seconds so the panel can load */
-	g_timeout_add_seconds (GPM_MANAGER_RECALL_DELAY, (GSourceFunc) gpm_manager_perhaps_recall_delay_cb, manager);
-}
-
-/**
  * gpm_manager_engine_icon_changed_cb:
  */
 static void
@@ -1958,8 +1857,15 @@
 	g_signal_connect (manager->priv->settings, "changed",
 			  G_CALLBACK (gpm_manager_settings_changed_cb), manager);
 	manager->priv->client = up_client_new ();
+#if UP_CHECK_VERSION(0, 99, 0)
+	g_signal_connect (manager->priv->client, "notify::lid-is-closed",
+			  G_CALLBACK (gpm_manager_client_changed_cb), manager);
+	g_signal_connect (manager->priv->client, "notify::on-battery",
+			  G_CALLBACK (gpm_manager_client_changed_cb), manager);
+#else
 	g_signal_connect (manager->priv->client, "changed",
 			  G_CALLBACK (gpm_manager_client_changed_cb), manager);
+#endif
 
 	/* use libmatenotify */
 	notify_init (GPM_NAME);
@@ -1988,9 +1894,11 @@
 
     manager->priv->kbd_backlight = gpm_kbd_backlight_new ();
     if (manager->priv->kbd_backlight != NULL) {
-        gpm_kbd_backlight_register_dbus (manager->priv->kbd_backlight,
-                                        g_connection,
-                                        NULL);
+    	dbus_g_object_type_install_info (GPM_TYPE_KBD_BACKLIGHT,
+						 &dbus_glib_gpm_kbd_backlight_object_info);
+		dbus_g_connection_register_g_object (connection, GPM_DBUS_PATH_KBD_BACKLIGHT,
+						     G_OBJECT (manager->priv->kbd_backlight));
+    
     }
 
 	manager->priv->idle = gpm_idle_new ();
@@ -2020,8 +1928,6 @@
 	gpm_manager_sync_policy_sleep (manager);
 
 	manager->priv->engine = gpm_engine_new ();
-	g_signal_connect (manager->priv->engine, "perhaps-recall",
-			  G_CALLBACK (gpm_manager_engine_perhaps_recall_cb), manager);
 	g_signal_connect (manager->priv->engine, "low-capacity",
 			  G_CALLBACK (gpm_manager_engine_low_capacity_cb), manager);
 	g_signal_connect (manager->priv->engine, "icon-changed",
diff -Naur a/src/gpm-prefs-core.c b/src/gpm-prefs-core.c
--- a/src/gpm-prefs-core.c	2014-03-01 12:40:24.000000000 +0100
+++ b/src/gpm-prefs-core.c	2014-04-27 00:16:56.849905489 +0200
@@ -811,7 +811,9 @@
 	UpDevice *device;
 	UpDeviceKind kind;
 	GpmBrightness *brightness;
+#if !UP_CHECK_VERSION(0, 99, 0)
 	gboolean ret;
+#endif
 	guint i;
 
 	GDBusProxy *proxy;
@@ -897,9 +899,11 @@
 	else {
 		/* are we allowed to shutdown? */
 		egg_console_kit_can_stop (prefs->priv->console, &prefs->priv->can_shutdown, NULL);
+#if !UP_CHECK_VERSION(0, 99, 0)
 		/* get values from UpClient */
 		prefs->priv->can_suspend = up_client_get_can_suspend (prefs->priv->client);
 		prefs->priv->can_hibernate = up_client_get_can_hibernate (prefs->priv->client);
+#endif
 	}
 
 	if (LOGIND_RUNNING()) {
@@ -953,14 +957,14 @@
 	brightness = gpm_brightness_new ();
 	prefs->priv->has_lcd = gpm_brightness_has_hw (brightness);
 	g_object_unref (brightness);
-
+#if !UP_CHECK_VERSION(0, 99, 0)
 	/* get device list */
 	ret = up_client_enumerate_devices_sync (prefs->priv->client, NULL, &error);
 	if (!ret) {
 		egg_warning ("failed to get device list: %s", error->message);
 		g_error_free (error);
 	}
-
+#endif
 	devices = up_client_get_devices (prefs->priv->client);
 	for (i=0; i<devices->len; i++) {
 		device = g_ptr_array_index (devices, i);
diff -Naur a/src/gpm-statistics.c b/src/gpm-statistics.c
--- a/src/gpm-statistics.c	2013-08-02 01:00:42.000000000 +0200
+++ b/src/gpm-statistics.c	2014-04-27 00:16:56.850905508 +0200
@@ -1236,6 +1236,12 @@
  * gpm_stats_device_changed_cb:
  **/
 static void
+#if UP_CHECK_VERSION(0, 99, 0)
+gpm_stats_device_changed_cb (UpClient *client, GParamSpec *pspec, gpointer user_data)
+{
+	gpm_stats_button_update_ui();
+}
+#else
 gpm_stats_device_changed_cb (UpClient *client, UpDevice *device, gpointer user_data)
 {
 	const gchar *object_path;
@@ -1246,6 +1252,7 @@
 	if (g_strcmp0 (current_device, object_path) == 0)
 		gpm_stats_update_info_data (device);
 }
+#endif
 
 /**
  * gpm_stats_device_removed_cb:
@@ -1794,11 +1801,12 @@
 
 	wakeups = up_wakeups_new ();
 	g_signal_connect (wakeups, "data-changed", G_CALLBACK (gpm_stats_data_changed_cb), NULL);
-
+#if !UP_CHECK_VERSION(0, 99, 0)
 	/* coldplug */
 	ret = up_client_enumerate_devices_sync (client, NULL, NULL);
 	if (!ret)
 		goto out;
+#endif
 	devices = up_client_get_devices (client);
 
 	/* add devices in visually pleasing order */
@@ -1814,7 +1822,11 @@
 	/* connect now the coldplug is done */
 	g_signal_connect (client, "device-added", G_CALLBACK (gpm_stats_device_added_cb), NULL);
 	g_signal_connect (client, "device-removed", G_CALLBACK (gpm_stats_device_removed_cb), NULL);
+#if UP_CHECK_VERSION(0, 99, 0)
+	g_signal_connect (client, "notify", G_CALLBACK (gpm_stats_device_changed_cb), NULL);
+#else
 	g_signal_connect (client, "device-changed", G_CALLBACK (gpm_stats_device_changed_cb), NULL);
+#endif
 
 	/* set current device */
 	if (devices->len > 0) {
@@ -1854,8 +1866,9 @@
 	gtk_widget_show (widget);
 
 	gtk_main ();
-
+#if !UP_CHECK_VERSION(0, 99, 0)
 out:
+#endif
 	g_object_unref (settings);
 	g_object_unref (client);
 	g_object_unref (wakeups);
diff -Naur a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am	2014-01-20 19:40:30.000000000 +0100
+++ b/src/Makefile.am	2014-04-27 00:16:43.866666553 +0200
@@ -6,6 +6,7 @@
 EXTRA_DIST =						\
 	org.mate.PowerManager.xml			\
 	org.mate.PowerManager.Backlight.xml		\
+	org.mate.PowerManager.KbdBacklight.xml		\
 	gpm-marshal.list				\
 	$(NULL)
 
@@ -273,6 +274,7 @@
 BUILT_SOURCES = 					\
 	org.mate.PowerManager.h			\
 	org.mate.PowerManager.Backlight.h		\
+	org.mate.PowerManager.KbdBacklight.h \
 	gpm-marshal.c					\
 	gpm-marshal.h					\
 	$(NULL)
@@ -298,6 +300,13 @@
 		--output=org.mate.PowerManager.Backlight.h	\
 		$(srcdir)/org.mate.PowerManager.Backlight.xml
 
+org.mate.PowerManager.KbdBacklight.h: org.mate.PowerManager.KbdBacklight.xml
+	libtool --mode=execute dbus-binding-tool	\
+		--prefix=gpm_kbd_backlight			\
+		--mode=glib-server			\
+		--output=org.mate.PowerManager.KbdBacklight.h	\
+		$(srcdir)/org.mate.PowerManager.KbdBacklight.xml
+
 clean-local:
 	rm -f *~
 	rm -f gpm-marshal.c gpm-marshal.h
diff -Naur a/src/org.mate.PowerManager.KbdBacklight.xml b/src/org.mate.PowerManager.KbdBacklight.xml
--- a/src/org.mate.PowerManager.KbdBacklight.xml	1970-01-01 01:00:00.000000000 +0100
+++ b/src/org.mate.PowerManager.KbdBacklight.xml	2014-04-27 00:16:43.868666590 +0200
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<node name="/">
+  <interface name="org.mate.PowerManager.KbdBacklight">
+    <method name="GetBrightness">
+      <arg type="u" name="percentage_brightness" direction="out"/>
+    </method>
+    <method name="SetBrightness">
+      <arg type="u" name="percentage_brightness" direction="in"/>
+    </method>
+    <signal name="BrightnessChanged">
+      <arg type="u" name="percentage_brightness" direction="out"/>
+    </signal>
+  </interface>
+</node>
+
