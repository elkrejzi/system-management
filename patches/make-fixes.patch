* main.c (main): [SV 48009] Reset stack limit for make re-exec.

--- a/dir.c	2016-05-21 22:22:09.000000000 +0200
+++ b/dir.c	2016-06-06 18:52:34.987904939 +0200
@@ -1082,7 +1082,7 @@
           else if (dir->contents->dirfiles.ht_vec == 0)
             {
 #ifdef WINDOWS32
-              printf (_("# %s (key %s, mtime %ull): could not be opened.\n"),
+              printf (_("# %s (key %s, mtime %I64u): could not be opened.\n"),
                       dir->name, dir->contents->path_key,
                       (unsigned long long)dir->contents->mtime);
 #else  /* WINDOWS32 */
@@ -1119,7 +1119,7 @@
                     }
                 }
 #ifdef WINDOWS32
-              printf (_("# %s (key %s, mtime %ull): "),
+              printf (_("# %s (key %s, mtime %I64u): "),
                       dir->name, dir->contents->path_key,
                       (unsigned long long)dir->contents->mtime);
 #else  /* WINDOWS32 */
--- a/filedef.h	2016-05-21 22:21:52.000000000 +0200
+++ b/filedef.h	2016-06-06 18:52:34.990904958 +0200
@@ -58,6 +58,8 @@
     FILE_TIMESTAMP last_mtime;  /* File's modtime, if already known.  */
     FILE_TIMESTAMP mtime_before_update; /* File's modtime before any updating
                                            has been performed.  */
+    unsigned int considered;    /* equal to 'considered' if file has been
+                                   considered on current scan of goal chain */
     int command_flags;          /* Flags OR'd in for cmds; see commands.h.  */
     enum update_status          /* Status of the last attempt to update.  */
       {
@@ -96,8 +98,6 @@
     unsigned int ignore_vpath:1;/* Nonzero if we threw out VPATH name.  */
     unsigned int pat_searched:1;/* Nonzero if we already searched for
                                    pattern-specific variables.  */
-    unsigned int considered:1;  /* equal to 'considered' if file has been
-                                   considered on current scan of goal chain */
     unsigned int no_diag:1;     /* True if the file failed to update and no
                                    diagnostics has been issued (dontcare). */
   };
--- a/main.c	2016-05-21 22:21:52.000000000 +0200
+++ b/main.c	2016-06-06 18:52:34.992904971 +0200
@@ -2262,10 +2262,6 @@
 
             for (i = 0, d = read_files; d != 0; ++i, d = d->next)
               {
-                /* Reset the considered flag; we may need to look at the file
-                   again to print an error.  */
-                d->file->considered = 0;
-
                 if (d->file->updated)
                   {
                     /* This makefile was updated.  */
@@ -2458,6 +2454,11 @@
             exit (WIFEXITED(r) ? WEXITSTATUS(r) : EXIT_FAILURE);
           }
 #else
+#ifdef SET_STACK_SIZE
+          /* Reset limits, if necessary.  */
+          if (stack_limit.rlim_cur)
+            setrlimit (RLIMIT_STACK, &stack_limit);
+#endif
           exec_command ((char **)nargv, environ);
 #endif
           free (aargv);
--- a/remake.c	2016-05-21 23:34:45.000000000 +0200
+++ b/remake.c	2016-06-06 18:52:34.991904965 +0200
@@ -57,8 +57,9 @@
 static struct goaldep *goal_list;
 static struct dep *goal_dep;
 
-/* Current value for pruning the scan of the goal chain (toggle 0/1).  */
-static unsigned int considered;
+/* Current value for pruning the scan of the goal chain.
+   All files start with considered == 0.  */
+static unsigned int considered = 0;
 
 static enum update_status update_file (struct file *file, unsigned int depth);
 static enum update_status update_file_1 (struct file *file, unsigned int depth);
@@ -90,12 +91,12 @@
 
   goal_list = rebuilding_makefiles ? goaldeps : NULL;
 
-  /* All files start with the considered bit 0, so the global value is 1.  */
-  considered = 1;
-
 #define MTIME(file) (rebuilding_makefiles ? file_mtime_no_search (file) \
                      : file_mtime (file))
 
+  /* Start a fresh batch of consideration.  */
+  ++considered;
+
   /* Update all the goals until they are all finished.  */
 
   while (goals != 0)
@@ -247,10 +248,10 @@
             }
         }
 
-      /* If we reached the end of the dependency graph toggle the considered
-         flag for the next pass.  */
+      /* If we reached the end of the dependency graph update CONSIDERED
+         for the next pass.  */
       if (g == 0)
-        considered = !considered;
+        ++considered;
     }
 
   if (rebuilding_makefiles)
@@ -615,8 +616,8 @@
             break;
 
           if (!running)
-            /* The prereq is considered changed if the timestamp has changed while
-               it was built, OR it doesn't exist.  */
+            /* The prereq is considered changed if the timestamp has changed
+               while it was built, OR it doesn't exist.  */
             d->changed = ((file_mtime (d->file) != mtime)
                           || (mtime == NONEXISTENT_MTIME));
 
@@ -650,7 +651,7 @@
             /* We may have already considered this file, when we didn't know
                we'd need to update it.  Force update_file() to consider it and
                not prune it.  */
-            d->file->considered = !considered;
+            d->file->considered = 0;
 
             new = update_file (d->file, depth);
             if (new > dep_status)
@@ -1087,7 +1088,7 @@
               /* If the target was waiting for a dependency it has to be
                  reconsidered, as that dependency might have finished.  */
               if (file->command_state == cs_deps_running)
-                file->considered = !considered;
+                file->considered = 0;
 
               set_command_state (file, cs_not_started);
             }
--- a/tests/scripts/features/double_colon	2016-05-21 23:34:45.000000000 +0200
+++ b/tests/scripts/features/double_colon	2016-06-06 18:52:34.991904965 +0200
@@ -197,6 +197,21 @@
 ',
               '-rs -j2 1 2 root', "all_one\nall_two\nroot\n");
 
+# SV 47995 : Parallel double-colon rules with FORCE
+
+run_make_test('
+all:: ; @echo one
+
+all:: joe ; @echo four
+
+joe: FORCE ; touch joe-is-forced
+
+FORCE:
+',
+              '-j5', "one\ntouch joe-is-forced\nfour\n");
+
+unlink('joe-is-forced');
+
 # This tells the test driver that the perl test script executed properly.
 1;
 
--- a/tests/scripts/targets/DELETE_ON_ERROR	2016-03-20 19:23:22.000000000 +0100
+++ b/tests/scripts/targets/DELETE_ON_ERROR	2016-06-06 18:52:34.989904952 +0200
@@ -6,17 +6,17 @@
 
 run_make_test('
 .DELETE_ON_ERROR:
-all: ; false > $@
+all: ; exit 1 > $@
 ',
-              '', "false > all\n#MAKE#: *** [#MAKEFILE#:3: all] Error 1\n#MAKE#: *** Deleting file 'all'", 512);
+              '', "exit 1 > all\n#MAKE#: *** [#MAKEFILE#:3: all] Error 1\n#MAKE#: *** Deleting file 'all'", 512);
 
 run_make_test('
 .DELETE_ON_ERROR:
 all: foo.x ;
 %.x : %.q ; echo > $@
-%.q : ; false > $@
+%.q : ; exit 1 > $@
 ',
-              '', "false > foo.q\n#MAKE#: *** [#MAKEFILE#:5: foo.q] Error 1\n#MAKE#: *** Deleting file 'foo.q'", 512);
+              '', "exit 1 > foo.q\n#MAKE#: *** [#MAKEFILE#:5: foo.q] Error 1\n#MAKE#: *** Deleting file 'foo.q'", 512);
 
 # This tells the test driver that the perl test script executed properly.
 1;
--- a/w32/Makefile.am	2016-04-04 07:36:08.000000000 +0200
+++ b/w32/Makefile.am	2016-06-06 18:52:34.986904933 +0200
@@ -22,4 +22,5 @@
 libw32_a_SOURCES =  subproc/misc.c subproc/sub_proc.c subproc/w32err.c \
 		    compat/posixfcn.c pathstuff.c w32os.c
 
-libw32_a_CPPFLAGS = -I$(srcdir)/include -I$(srcdir)/subproc -I$(top_srcdir)
+libw32_a_CPPFLAGS = -I$(srcdir)/include -I$(srcdir)/subproc -I$(top_srcdir) \
+		    -I$(top_srcdir)/glob
--- a/w32/pathstuff.c	2016-02-28 18:48:44.000000000 +0100
+++ b/w32/pathstuff.c	2016-06-06 18:52:34.988904945 +0200
@@ -32,7 +32,7 @@
          * contain blanks get trounced here. Use 8.3 format as a workaround.
          */
         for (etok = Path; etok && *etok; etok++)
-                if (isblank ((unsigned char) *etok))
+                if (ISBLANK ((unsigned char) *etok))
                         *etok = to_delim;
 
         return (convert_Path_to_windows32(Path, to_delim));
