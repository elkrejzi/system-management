--- a/third_party/WebKit/Source/platform/heap/GCInfo.cpp	2016-01-20 21:01:25.000000000 +0100
+++ b/third_party/WebKit/Source/platform/heap/GCInfo.cpp	2016-01-21 17:55:51.495528678 +0100
@@ -2,6 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include <cstdlib>
+
 #include "config.h"
 #include "platform/heap/GCInfo.h"
 
--- a/v8/src/compiler/instruction.h	2016-01-20 21:02:45.000000000 +0100
+++ b/v8/src/compiler/instruction.h	2016-01-21 17:55:25.053981277 +0100
@@ -1066,7 +1066,7 @@
 
 typedef ZoneDeque<Constant> ConstantDeque;
 typedef std::map<int, Constant, std::less<int>,
-                 zone_allocator<std::pair<int, Constant> > > ConstantMap;
+                 zone_allocator<std::pair<const int, Constant> > > ConstantMap;
 
 typedef ZoneDeque<Instruction*> InstructionDeque;
 typedef ZoneDeque<ReferenceMap*> ReferenceMapDeque;
--- a/v8/src/zone-containers.h	2016-01-20 21:02:45.000000000 +0100
+++ b/v8/src/zone-containers.h	2016-01-21 17:55:25.067981567 +0100
@@ -114,12 +114,12 @@
 // a zone allocator.
 template <typename K, typename V, typename Compare = std::less<K>>
 class ZoneMap
-    : public std::map<K, V, Compare, zone_allocator<std::pair<K, V>>> {
+    : public std::map<K, V, Compare, zone_allocator<std::pair<const K, V>>> {
  public:
   // Constructs an empty map.
   explicit ZoneMap(Zone* zone)
-      : std::map<K, V, Compare, zone_allocator<std::pair<K, V>>>(
-            Compare(), zone_allocator<std::pair<K, V>>(zone)) {}
+      : std::map<K, V, Compare, zone_allocator<std::pair<const K, V>>>(
+            Compare(), zone_allocator<std::pair<const K, V>>(zone)) {}
 };
 
 
