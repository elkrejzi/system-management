#!/bin/bash -e

export PKGNAME=llvm
export PKGVER=3.7.0
export PKGTAR=${PKGNAME}-${PKGVER}.src.tar.xz
export PKGURL="http://llvm.org/releases/${PKGVER}/${PKGTAR}"
export PKGDIR=${PKGNAME}-${PKGVER}.src

export MAKE_JOBS_FLAGS="-j4"
export CMAKE_BUILD=1
export MULTILIB_BUILD=1
export PATCHES_LIST=("llvm-link-tools-against-libLLVM.patch" "llvm-export-more-symbols.patch")
export PATCHES_LIST_32=${PATCHES_LIST}

export SHARED_FLAGS="-DCLANG_INCLUDE_TESTS=OFF   \
                     -DLLVM_BUILD_LLVM_DYLIB=ON  \
                     -DLLVM_DYLIB_EXPORT_ALL=ON  \
                     -DLLVM_ENABLE_DOXYGEN=OFF   \
                     -DLLVM_ENABLE_FFI=ON        \
                     -DLLVM_ENABLE_LIBCXXABI=ON  \
                     -DLLVM_ENABLE_RTTI=ON       \
                     -DLLVM_INCLUDE_EXAMPLES=OFF \
                     -DLLVM_INCLUDE_TESTS=OFF    \
                     -DLLVM_LINK_LLVM_DYLIB=ON   \
                     -DLIBCXX_ENABLE_ASSERTIONS=OFF     \
                     -DLIBCXXABI_ENABLE_ASSERTIONS=OFF  \
                     -DLIBCXXABI_ENABLE_STATIC=OFF      \
                     -DLIBCXXABI_USE_LLVM_UNWINDER=ON   \
                     -DLIBUNWIND_ENABLE_ASSERTIONS=OFF  \
                     -DLIBUNWIND_ENABLE_SHARED=OFF      \
                     -DLLVM_TARGETS_TO_BUILD=AMDGPU;X86 \
                     -DLLVM_BINUTILS_INCDIR=/usr/include"

export CMAKE_FLAGS="${SHARED_FLAGS}          \
                    -DLLVM_BUILD_DOCS=ON     \
                    -DLLVM_ENABLE_SPHINX=ON  \
                    -DSPHINX_OUTPUT_HTML=OFF \
                    -DSPHINX_WARNINGS_AS_ERRORS=OFF"

export CMAKE_FLAGS_32="${SHARED_FLAGS}           \
                       -DCLANG_INCLUDE_DOCS=OFF  \
                       -DLLVM_LIBDIR_SUFFIX=32   \
                       -DLLVM_TARGET_ARCH=i686   \
                       -DLIBCXX_INCLUDE_DOCS=OFF \
                       -DLLVM_DEFAULT_TARGET_TRIPLE=i686-pc-linux-gnu"

configure_pre() {
  unset POST_PREPARE RECURSIVE_CALL
}

configure_pre_32() {
  rm -rf ../${PKGDIR}/tools/{lld,lldb}
  rm -rf ../${PKGDIR}/tools/clang/tools/extra
}

make_install_post() {
  rm -f ${DEST}/usr/lib/libgomp.so

  install -dm755 ${DEST}/usr/lib/bfd-plugins
  ln -sf ../LLVMgold.so ${DEST}/usr/lib/bfd-plugins/LLVMgold.so

  mv ${DEST}/usr/include/llvm/Config/llvm-config.h ${DEST}/usr/include/llvm/Config/llvm-config-64.h

cat > ${DEST}/usr/include/llvm/Config/llvm-config.h << "EOF"
#include <bits/wordsize.h>

#if __WORDSIZE == 32
#include "llvm-config-32.h"
#elif __WORDSIZE == 64
#include "llvm-config-64.h"
#else
#error "Unknown word size"
#endif
EOF

  install -m644 ../${PKGDIR}/tools/lldb/docs/lldb.1 ${DEST}/usr/share/man/man1/lldb.1

  cp -r ../${PKGDIR}/tools/clang/bindings/python/clang ${DEST}/usr/lib/python2.7/site-packages/

  install -dm755 ${DEST}/usr/lib/clang-analyzer

  for _tool in scan-build scan-view
  do
    cp -r ../${PKGDIR}/tools/clang/tools/$_tool ${DEST}/usr/lib/clang-analyzer/
    ln -sf ../lib/clang-analyzer/$_tool/$_tool ${DEST}/usr/bin/
  done

  ln -sf /usr/bin/clang ${DEST}/usr/lib/clang-analyzer/scan-build/clang
  mv ${DEST}/usr/lib/clang-analyzer/scan-build/scan-build.1 ${DEST}/usr/share/man/man1

  python -m compileall ${DEST}/usr/lib/python2.7/site-packages/clang
  python -O -m compileall ${DEST}/usr/lib/python2.7/site-packages/clang

  python -m compileall ${DEST}/usr/lib/clang-analyzer
  python -O -m compileall ${DEST}/usr/lib/clang-analyzer

  python -m compileall ${DEST}/usr/lib/python2.7/site-packages/lldb
  python -O -m compileall ${DEST}/usr/lib/python2.7/site-packages/lldb
}

make_install_post_32() {
  rm -f ${DEST}/usr/lib32/libgomp.so

  mv dest/usr/bin/llvm-config ${DEST}/usr/bin/llvm-config32
  mv dest/usr/include/llvm/Config/llvm-config.h ${DEST}/usr/include/llvm/Config/llvm-config-32.h
  mv dest/usr/lib/* ${DEST}/usr/lib32/

  install -dm755 ${DEST}/usr/lib32/bfd-plugins
  ln -sf ../LLVMgold.so ${DEST}/usr/lib32/bfd-plugins/LLVMgold.so
}

post_install_config() {
  remove_rpath
}

proj=(
  cfe
  clang-tools-extra
  compiler-rt
  libcxx
  libcxxabi
  libunwind
  lld
  lldb
  openmp
  polly
)

post_extract_action() {
  if [ -z ${POST_PREPARE} ]
  then
    export POST_PREPARE=1
    export RECURSIVE_CALL=1
    for f in ${proj[@]}
    do

      PKGURL="http://llvm.org/releases/${PKGVER}/${f}-${PKGVER}.src.tar.xz" \
      CMAKE_BUILD=0 prepare_src ${f}-${PKGVER}.src.tar.xz

      if [ -d ${f}-${PKGVER}.src ]
      then
        mv ${f}-${PKGVER}.src ${f}
      fi

      if [ ${f} == "cfe" ]
      then
        sed -i "/ld-linux-x86-64/s/lib64/lib/" cfe/lib/Driver/Tools.cpp
        mv ${f} ${PKGDIR}/tools/clang
      elif [ ${f} == "clang-tools-extra" ]
      then
        PKGDIR=clang-tools-extra patch_apply clang-tools-extra-install-clang-query.patch
        mv ${f} ${PKGDIR}/tools/clang/tools/extra
      elif [ ${f} == "lldb" ]
      then
        PKGDIR=lldb patch_apply lldb-avoid-linking-to-libLLVM.patch
      fi

      if [ ${f} == "lld" ] || [ ${f} == "lldb" ] || [ ${f} == "polly" ]
      then
        mv ${f} ${PKGDIR}/tools
      else
        if [ ${f} != "cfe" ] && [ ${f} != "clang-tools-extra" ]
        then
          mv ${f} ${PKGDIR}/projects
        fi
      fi

    done
  fi
}

. $(dirname $0)/master.sh
