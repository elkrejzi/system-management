#!/bin/bash -e

export PKGNAME=linux
export PKGVER=4.6
export PATCHVER=4.6.1
export COMMON_URL="https://cdn.kernel.org/pub/linux/kernel/v4.x"
export PKGTAR=${PKGNAME}-${PKGVER}.tar.xz
export PKGURL="${COMMON_URL}/${PKGTAR}"
export MAKE_JOBS_FLAGS="-j4"
export NO_OPTIMIZATION=1
export NO_STRIP=1
export PATCHES_LIST=("linux-march-native.patch")
export DEFAULT_CC="gcc"

post_extract_action() {
  if [ ! -z ${PATCHVER} ]
  then
    if [ ! -e ${SROOT}/patch-${PATCHVER}.xz ]
    then
      wget -c ${COMMON_URL}/patch-${PATCHVER}.xz -O ${SROOT}/patch-${PATCHVER}.xz || exit ${PIPESTATUS}
    fi
    pushd ${PKGDIR}
      xz -cd ${SROOT}/patch-${PATCHVER}.xz | patch -Np1 -i -
    popd
  fi
}

configure_override() {
  export EXTRA="-krejzi"
  export KBUILD_BUILD_USER="krejzi"
  export KBUILD_BUILD_HOST="email.com"

  if [ ! -e ".config" ]
  then
    install -m644 /media/ntfs/Other/Linux/kernel-config .config
  fi

  sed -i "s:-ltinfo ::g" tools/thermal/tmon/Makefile
}

make_override() {
  make prepare
  make scripts

  make ${MAKE_JOBS_FLAGS}

  for DIR in tools/thermal/tmon tools/power/cpupower tools/power/x86/turbostat
  do
    make -C ${DIR} ${MAKE_JOBS_FLAGS}
  done
}

make_install_override() {
  export KERNELVERSION=$(make kernelrelease)

  export PKGKERNEL=/binary/linux-${KERNELVERSION}
  export PKGHEADERS=/binary/linux-headers-${KERNELVERSION}
  export PKGTOOLS=/binary/linux-tools-$(echo ${KERNELVERSION} | sed "s/$EXTRA//")

  export DEST=${PKGKERNEL}

  # Begin linux
  install -dm755 ${PKGKERNEL}/boot

  install -m644 .config ${PKGKERNEL}/boot/config
  install -m644 System.map ${PKGKERNEL}/boot/System.map
  install -m644 arch/x86/boot/bzImage ${PKGKERNEL}/boot/vmlinuz

  make modules_install INSTALL_MOD_PATH=${PKGKERNEL}

  rm -rf ${PKGKERNEL}/lib/firmware
  rm -rf ${PKGKERNEL}/lib/modules/${KERNELVERSION}/{build,source}
  # End linux

  # Begin linux-headers
  export HEADERSDIR=${PKGHEADERS}/usr/src/linux-headers-${KERNELVERSION}

  install -dm755 ${PKGHEADERS}/lib/modules/${KERNELVERSION}

  ln -sf /usr/src/linux-headers-${KERNELVERSION} ${PKGHEADERS}/lib/modules/${KERNELVERSION}/build
  ln -sf /usr/src/linux-headers-${KERNELVERSION} ${PKGHEADERS}/lib/modules/${KERNELVERSION}/source

  install -dm755 ${HEADERSDIR}/arch/x86/kernel
  install -dm755 ${HEADERSDIR}/scripts/{basic,genksyms,kconfig,mod}

  install -m644 .config ${HEADERSDIR}
  install -m644 Makefile ${HEADERSDIR}
  install -m644 Module.symvers ${HEADERSDIR}
  install -m644 arch/x86/Makefile ${HEADERSDIR}/arch/x86
  install -m644 arch/x86/kernel/asm-offsets.s ${HEADERSDIR}/arch/x86/kernel

  cp -r arch/x86/include ${HEADERSDIR}/arch/x86
  cp -r include ${HEADERSDIR}

  ln -sf ../generated/uapi/linux/version.h ${HEADERSDIR}/include/linux/version.h

  find ${HEADERSDIR}/arch/x86 -name ".*.cmd" -delete

  for SCRIPT in Kbuild.include Lindent Makefile.build                       \
                Makefile.{clean,extrawarn,host,kasan,lib,modpost}           \
                check{includes,stack,version}.pl conmakehash                \
                {depmod,gcc-goto,gcc-version,gen_initramfs_list,mkuboot}.sh \
                gcc-x86_{32,64}-has-stack-protector.sh kallsyms kernel-doc  \
                makelst mksysmap mkuboot.sh mkversion module-common.lds     \
                namespace.pl patch-kernel setlocalversion ver_linux
  do
    cp scripts/${SCRIPT} ${HEADERSDIR}/scripts
  done

  cp scripts/basic/fixdep ${HEADERSDIR}/scripts/basic
  cp scripts/genksyms/genksyms ${HEADERSDIR}/scripts/genksyms
  cp scripts/kconfig/conf ${HEADERSDIR}/scripts/kconfig
  cp scripts/mod/modpost ${HEADERSDIR}/scripts/mod
  # End linux-headers

  # Begin linux-tools
  install -dm755 ${PKGTOOLS}/usr/bin ${PKGTOOLS}/usr/share/man/man8

  pushd tools/thermal/tmon
    install -m755 tmon ${PKGTOOLS}/usr/bin
    install -m644 tmon.8 ${PKGTOOLS}/usr/share/man/man8
  popd

  pushd tools/power/cpupower
    make mandir=/usr/share/man install DESTDIR=${PKGTOOLS}
    rm -rf ${PKGTOOLS}/usr/share/doc
  popd

  pushd tools/power/x86/turbostat
    make install DESTDIR=${PKGTOOLS}
  popd
  # End linux-tools
}

generate_install_override() {
cat > ${PKGKERNEL}/INSTALL << "EOF"
#!/bin/bash

mount -o remount,rw /boot

for dir in boot lib ; do cp -rf --remove-destination $dir / ; done

mount -o remount,ro /boot
EOF

cat > ${PKGHEADERS}/INSTALL << "EOF"
#!/bin/bash

for dir in lib usr ; do cp -rf --remove-destination $dir / ; done
EOF

cat > ${PKGTOOLS}/INSTALL << "EOF"
#!/bin/bash

for dir in etc usr ; do cp -rf --remove-destination $dir / ; done

[ -x /usr/bin/mandb ] && echo "Processing triggers for man-db" && /usr/bin/mandb -q
[ -x /sbin/ldconfig ] && echo "Processing triggers for glibc" && /sbin/ldconfig
EOF

  chmod 755 ${PKGKERNEL}/INSTALL ${PKGHEADERS}/INSTALL ${PKGTOOLS}/INSTALL

  if [ ! -z ${PKG_AUTO_INSTALL} ]
  then
    for d in ${PKGKERNEL} ${PKGHEADERS} ${PKGTOOLS}
    do
      pushd ${d}
        ./INSTALL
      popd
    done
  fi

  unset PKG_AUTO_INSTALL
}

post_install_config() {
  find ${HEADERSDIR}/scripts ${PKGTOOLS} -type f 2>/dev/null | while read BUILD_BINARY ; do
    case "$(file -bi "${BUILD_BINARY}")" in *application/x-sharedlib* | *application/x-executable*)
      strip --strip-unneeded ${BUILD_BINARY}
    esac
  done
}

. $(dirname $0)/master.sh
