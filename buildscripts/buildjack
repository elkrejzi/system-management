#!/bin/bash -e

export VER=1.9.10
export DEST=/binary/jack-${VER}

cp -a jack-${VER} jack-${VER}-32

pushd jack-${VER}

CFLAGS="-march=native -mtune=native -O2 -pipe -fstack-protector-strong"   \
CXXFLAGS="-march=native -mtune=native -O2 -pipe -fstack-protector-strong" \
python waf configure --prefix=/usr \
                     --alsa        \
                     --dbus
python waf build -j4
python waf install --destdir=${DEST}

popd

pushd jack-${VER}-32

sed -e '/serverlib/,/clientlib/{/clientlib/!d}' \
    -e '/clientlib32bit/i\\tclientlib.posted = True' \
    -e '1,/clientlib32bit/!d' \
    -i common/wscript

sed -i 's/, "CELT", "OPUS"//' common/wscript

export CC="gcc -m32"
export CXX="g++ -m32"
export PKG_CONFIG_PATH=/usr/lib32/pkgconfig

CFLAGS="-march=native -mtune=native -O2 -pipe -fstack-protector-strong"   \
CXXFLAGS="-march=native -mtune=native -O2 -pipe -fstack-protector-strong" \
python waf configure --prefix=/usr \
                     --libdir=/usr/lib32 \
                     --alsa    \
                     --dbus

pushd common
python ../waf build -j4
popd

install -Dm755 build/common/libjack.so ${DEST}/usr/lib32/libjack.so.0.1.0

ln -sf libjack.so.0.1.0 ${DEST}/usr/lib32/libjack.so.0
ln -sf libjack.so.0.1.0 ${DEST}/usr/lib32/libjack.so

install -dm755 ${DEST}/usr/lib32/pkgconfig

cat > ${DEST}/usr/lib32/pkgconfig/jack.pc << "EOF"
prefix=/usr
exec_prefix=/usr
libdir=/usr/lib32
includedir=/usr/include

Name: jack
Description: the Jack Audio Connection Kit: a low-latency synchronous callback-based media server
Version: 1.9.9.5
Libs: -L/usr/lib32 -ljack
Cflags: -I/usr/include
EOF

popd

rm -rf jack-${VER} jack-${VER}-32

install -dm755 ${DEST}/etc/security/limits.d ${DEST}/lib/udev/rules.d

cat > ${DEST}/etc/security/limits.d/99-audio.conf << "EOF"
@audio 	- rtprio 	99
@audio 	- memlock 	unlimited
EOF

cat > ${DEST}/lib/udev/rules.d/40-hpet-permissions.rules << "EOF"
KERNEL=="rtc0", GROUP="audio"
KERNEL=="hpet", GROUP="audio"
EOF

pushd ${DEST}

find * -type f 2>/dev/null | while read BUILD_BINARY ; do
  case "$(file -bi "${BUILD_BINARY}")" in *application/x-sharedlib* | *application/x-executable*)
    strip --strip-unneeded ${BUILD_BINARY}
  esac
done

popd

cat > ${DEST}/INSTALL << "EOF"
#!/bin/bash

for dir in etc lib usr ; do cp -rf --remove-destination $dir / ; done

[ -x /usr/bin/mandb ] && echo "Processing triggers for man-db" && /usr/bin/mandb -q
[ -x /sbin/ldconfig ] && echo "Processing triggers for glibc" && /sbin/ldconfig
EOF

chmod 755 ${DEST}/INSTALL
