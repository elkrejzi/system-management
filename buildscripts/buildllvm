#!/bin/bash -e

export VER=3.7.0
export DEST=/binary/llvm-${VER}

proj=(
  cfe
  clang-tools-extra
  compiler-rt
  libcxx
  libcxxabi
  libunwind
  lld
  lldb
  llvm
  openmp
  polly
)

for f in ${proj[@]}
do
  if [ -e ${f}-${VER}.src.tar.xz ]
  then
    tar xf ${f}-${VER}.src.tar.xz
  elif [ -e /media/ntfs/Other/Linux/sources/${f}-${VER}.src.tar.xz ]
  then
    tar xf /media/ntfs/Other/Linux/sources/${f}-${VER}.src.tar.xz
  else
    wget http://llvm.org/releases/${VER}/${f}-${VER}.src.tar.xz
    tar xf ${f}-${VER}.src.tar.xz
  fi

  if [ ${f} == "cfe" ]
  then
    mv ${f}-${VER}.src clang
  else
    mv ${f}-${VER}.src ${f}
  fi

  rm -f ${f}-${VER}.src.tar.xz
done

# clang: use /lib instead of /lib64 for x86-64
sed -i "/ld-linux-x86-64/s/lib64/lib/" clang/lib/Driver/Tools.cpp

pushd llvm
  # llvm: backport LLVM_LINK_LLVM_DYLIB option (fixed in 3.8.0)
  patch -Np1 -i /media/ntfs/Other/Linux/patches/llvm-link-tools-against-libLLVM.patch
  # llvm: export all symbols
  patch -Np1 -i /media/ntfs/Other/Linux/patches/llvm-export-more-symbols.patch
popd

pushd lldb
  # lldb: don't link to libLLVM.so
  patch -Np1 -i /media/ntfs/Other/Linux/patches/lldb-avoid-linking-to-libLLVM.patch
popd

pushd clang-tools-extra
  # clang-tools-extra: install clang-query program (fixed in 3.8.0)
  patch -Np1 -i /media/ntfs/Other/Linux/patches/clang-tools-extra-install-clang-query.patch
popd

rm -rf llvm/projects/{compiler-rt,libcxx,libcxxabi,libunwind,openmp}
rm -rf llvm/tools/{clang,lld,lldb,polly}

mv {compiler-rt,libcxx,libcxxabi,libunwind,openmp} llvm/projects/
mv {clang,polly} llvm/tools/

cp -a llvm llvm-32

mv {lld,lldb} llvm/tools/
mv clang-tools-extra llvm/tools/clang/tools/extra

install -dm755 llvm-build

pushd llvm-build

cmake -DCMAKE_INSTALL_PREFIX=/usr \
      -DCMAKE_BUILD_TYPE=Release  \
      -DCLANG_INCLUDE_TESTS=OFF   \
      -DLLVM_BUILD_DOCS=ON        \
      -DLLVM_BUILD_LLVM_DYLIB=ON  \
      -DLLVM_DYLIB_EXPORT_ALL=ON  \
      -DLLVM_ENABLE_DOXYGEN=OFF   \
      -DLLVM_ENABLE_FFI=ON        \
      -DLLVM_ENABLE_LIBCXXABI=ON  \
      -DLLVM_ENABLE_RTTI=ON       \
      -DLLVM_ENABLE_SPHINX=ON     \
      -DLLVM_INCLUDE_EXAMPLES=OFF \
      -DLLVM_INCLUDE_TESTS=OFF    \
      -DLLVM_LINK_LLVM_DYLIB=ON   \
      -DSPHINX_OUTPUT_HTML=OFF    \
      -DSPHINX_WARNINGS_AS_ERRORS=OFF      \
      -DLIBCXX_ENABLE_ASSERTIONS=OFF       \
      -DLIBCXXABI_ENABLE_ASSERTIONS=OFF    \
      -DLIBCXXABI_ENABLE_STATIC=OFF        \
      -DLIBCXXABI_USE_LLVM_UNWINDER=ON     \
      -DLIBUNWIND_ENABLE_ASSERTIONS=OFF    \
      -DLIBUNWIND_ENABLE_SHARED=OFF        \
      -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86" \
      -DLLVM_BINUTILS_INCDIR=/usr/include  \
      -DCMAKE_C_FLAGS="-march=sandybridge -fomit-frame-pointer -O2 -pipe -fstack-protector-strong"   \
      -DCMAKE_CXX_FLAGS="-march=sandybridge -fomit-frame-pointer -O2 -pipe -fstack-protector-strong" \
      ../llvm

make -j4
make install DESTDIR=${DEST}

rm -f ${DEST}/usr/lib/libgomp.so

install -dm755 ${DEST}/usr/lib/bfd-plugins
ln -sf ../LLVMgold.so ${DEST}/usr/lib/bfd-plugins/LLVMgold.so

mv ${DEST}/usr/include/llvm/Config/llvm-config.h ${DEST}/usr/include/llvm/Config/llvm-config-64.h

cat > ${DEST}/usr/include/llvm/Config/llvm-config.h << "EOF"
#include <bits/wordsize.h>

#if __WORDSIZE == 32
#include "llvm-config-32.h"
#elif __WORDSIZE == 64
#include "llvm-config-64.h"
#else
#error "Unknown word size"
#endif
EOF

python -m compileall ${DEST}/usr/lib/python2.7/site-packages/lldb
python -O -m compileall ${DEST}/usr/lib/python2.7/site-packages/lldb

popd

pushd llvm

install -m644 tools/lldb/docs/lldb.1 ${DEST}/usr/share/man/man1/lldb.1

cp -r tools/clang/bindings/python/clang ${DEST}/usr/lib/python2.7/site-packages/

python -m compileall ${DEST}/usr/lib/python2.7/site-packages/clang
python -O -m compileall ${DEST}/usr/lib/python2.7/site-packages/clang

install -dm755 ${DEST}/usr/lib/clang-analyzer

for _tool in scan-build scan-view
do
   cp -r tools/clang/tools/$_tool ${DEST}/usr/lib/clang-analyzer/
   ln -sf ../lib/clang-analyzer/$_tool/$_tool ${DEST}/usr/bin/
done

ln -sf /usr/bin/clang ${DEST}/usr/lib/clang-analyzer/scan-build/clang

mv ${DEST}/usr/lib/clang-analyzer/scan-build/scan-build.1 ${DEST}/usr/share/man/man1

python -m compileall ${DEST}/usr/lib/clang-analyzer
python -O -m compileall ${DEST}/usr/lib/clang-analyzer

popd

rm -rf llvm llvm-build

install -dm755 llvm-build-32

pushd llvm-build-32

export CC="gcc -m32"
export CXX="g++ -m32"
export PKG_CONFIG_PATH=/usr/lib32/pkgconfig

cmake -DCMAKE_INSTALL_PREFIX=/usr \
      -DCMAKE_BUILD_TYPE=Release  \
      -DCLANG_INCLUDE_DOCS=OFF    \
      -DCLANG_INCLUDE_TESTS=OFF   \
      -DLLVM_BUILD_LLVM_DYLIB=ON  \
      -DLLVM_DYLIB_EXPORT_ALL=ON  \
      -DLLVM_ENABLE_DOXYGEN=OFF   \
      -DLLVM_ENABLE_FFI=ON        \
      -DLLVM_ENABLE_LIBCXXABI=ON  \
      -DLLVM_ENABLE_RTTI=ON       \
      -DLLVM_INCLUDE_EXAMPLES=OFF \
      -DLLVM_INCLUDE_TESTS=OFF    \
      -DLLVM_LIBDIR_SUFFIX=32     \
      -DLLVM_LINK_LLVM_DYLIB=ON   \
      -DLLVM_TARGET_ARCH="i686"   \
      -DLIBCXX_ENABLE_ASSERTIONS=OFF       \
      -DLIBCXX_INCLUDE_DOCS=OFF            \
      -DLIBCXXABI_ENABLE_ASSERTIONS=OFF    \
      -DLIBCXXABI_ENABLE_STATIC=OFF        \
      -DLIBCXXABI_USE_LLVM_UNWINDER=ON     \
      -DLIBUNWIND_ENABLE_ASSERTIONS=OFF    \
      -DLIBUNWIND_ENABLE_SHARED=OFF        \
      -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86" \
      -DLLVM_BINUTILS_INCDIR=/usr/include  \
      -DLLVM_DEFAULT_TARGET_TRIPLE="i686-pc-linux-gnu" \
      -DCMAKE_C_FLAGS="-march=sandybridge -fomit-frame-pointer -O2 -pipe -fstack-protector-strong"   \
      -DCMAKE_CXX_FLAGS="-march=sandybridge -fomit-frame-pointer -O2 -pipe -fstack-protector-strong" \
      ../llvm-32

make -j4
make install DESTDIR=${PWD}/dest

rm -f ${DEST}/usr/lib32/libgomp.so

mv dest/usr/bin/llvm-config ${DEST}/usr/bin/llvm-config32

mv dest/usr/include/llvm/Config/llvm-config.h ${DEST}/usr/include/llvm/Config/llvm-config-32.h

mv dest/usr/lib32 ${DEST}/usr/
mv dest/usr/lib/* ${DEST}/usr/lib32/

install -dm755 ${DEST}/usr/lib32/bfd-plugins
ln -sf ../LLVMgold.so ${DEST}/usr/lib32/bfd-plugins/LLVMgold.so

popd

rm -rf llvm-32 llvm-build-32

pushd ${DEST}

find * -type f 2>/dev/null | while read BUILD_BINARY ; do
  case "$(file -bi "${BUILD_BINARY}")" in *application/x-sharedlib* | *application/x-executable*)
    strip --strip-unneeded ${BUILD_BINARY}
    chrpath -d ${BUILD_BINARY}
  esac
done

find * -type f -name "*.a" -exec strip --strip-unneeded {} \;

popd

cat > ${DEST}/INSTALL << "EOF"
#!/bin/bash

cp -rf --remove-destination usr /

[ -x /usr/bin/mandb ] && echo "Processing triggers for man-db" && /usr/bin/mandb -q
[ -x /sbin/ldconfig ] && echo "Processing triggers for glibc" && /sbin/ldconfig
EOF

chmod 755 ${DEST}/INSTALL
