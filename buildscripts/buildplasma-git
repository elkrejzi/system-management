#!/bin/bash -e

export DEST=/binary/plasma

plasmas=(
  bluez-qt
  kde-cli-tools
  kdecoration
  kfilemetadata
  kio-extras
  kwayland
  libkscreen
  libksysguard
  baloo
  breeze
  kwin
  oxygen
  oxygen-fonts
  khelpcenter
  kinfocenter
  ksysguard
  systemsettings
  plasma-workspace
  bluedevil
  kde-gtk-config
  khotkeys
  kmenuedit
  kscreen
  kwrited
  milou
  plasma-nm
  plasma-workspace-wallpapers
  polkit-kde-agent-1
  powerdevil
  plasma-desktop
  kdeplasma-addons
 )

for plasma in ${plasmas[@]}
do

  if [[ -d ${plasma} ]]
  then
    pushd ${plasma}
      if [[ ${plasma} != "plasma-workspace-wallpapers" ]]
      then
        git clean -fdx
        git fetch origin
        git reset --hard origin/master
        export VER=$(grep "PROJECT_VERSION " CMakeLists.txt | cut -d \" -f2)
      else
        rm -rf ${plasma}/build
        svn up
      fi
    popd
  else
    if [[ ${plasma} != "plasma-workspace-wallpapers" ]]
    then
      git clone git://anongit.kde.org/${plasma}.git
    else
      svn co svn://svn.kde.org/home/kde/trunk/KDE/${plasma}
    fi
    pushd ${plasma}
      if [[ ${plasma} != "plasma-workspace-wallpapers" ]]
      then
        export VER=$(grep "PROJECT_VERSION " CMakeLists.txt | cut -d \" -f2)
      fi
    popd
  fi

  install -dm755 ${plasma}/build
  pushd ${plasma}/build

  cmake -DCMAKE_INSTALL_PREFIX=/usr             \
        -DCMAKE_BUILD_TYPE=Release              \
        -DSYSCONF_INSTALL_DIR=/etc              \
        -DLIB_INSTALL_DIR=lib                   \
        -DBUILD_TESTING=OFF                     \
        -DQML_INSTALL_DIR=lib/qt5/qml           \
        -DQT_PLUGIN_INSTALL_DIR=lib/qt5/plugins \
        -DECM_MKSPECS_INSTALL_DIR=/usr/lib/qt5/mkspecs/modules \
        -DCMAKE_C_FLAGS="-march=native -mtune=native -O2 -pipe -fstack-protector-strong"   \
        -DCMAKE_CXX_FLAGS="-march=native -mtune=native -O2 -pipe -fstack-protector-strong" \
        -Wno-dev ..

  make -j4
  make install DESTDIR=${DEST}/${plasma}-${VER}

  popd

  pushd ${DEST}/${plasma}-${VER}

  find * -type f 2>/dev/null | while read BUILD_BINARY ; do
    case "$(file -bi "${BUILD_BINARY}")" in *application/x-sharedlib* | *application/x-executable*)
      strip --strip-unneeded ${BUILD_BINARY}
    esac
  done

  popd

  if [[ ${plasma} == "plasma-workspace" ]]
  then

    sed -i "s:qtpaths:&-qt5:g" ${DEST}/${plasma}-${VER}/usr/bin/startkde

    install -dm755 ${DEST}/${plasma}-${VER}/etc/pam.d

cat > ${DEST}/${plasma}-${VER}/etc/pam.d/kde << "EOF"
# Begin /etc/pam.d/kde

auth     include        system-auth
-auth    optional       pam_gnome_keyring.so

account  include        system-account
password include        system-password
session  include        system-session

# End /etc/pam.d/kde
EOF

  fi

  if [[ -e ${DEST}/${plasma}-${VER}/etc ]]
  then

cat > ${DEST}/${plasma}-${VER}/INSTALL << "EOF"
#!/bin/bash

for dir in etc usr ; do cp -rf --remove-destination $dir / ; done
EOF

  elif [[ -e ${DEST}/${plasma}-${VER}/lib ]]
  then

cat > ${DEST}/${plasma}-${VER}/INSTALL << "EOF"
#!/bin/bash

for dir in lib usr ; do cp -rf --remove-destination $dir / ; done
EOF

  else

cat > ${DEST}/${plasma}-${VER}/INSTALL << "EOF"
#!/bin/bash

cp -rf --remove-destination usr /
EOF

  fi

  if [[ ${plasma} == "breeze" ]]
  then

cat >> ${DEST}/${plasma}-${VER}/INSTALL << "EOF"

[ -x /usr/bin/gtk-update-icon-cache ] && echo "Processing triggers for breeze-icon-theme" && /usr/bin/gtk-update-icon-cache -qf /usr/share/icons/breeze
[ -x /usr/bin/gtk-update-icon-cache ] && echo "Processing triggers for breeze-dark-icon-theme" && /usr/bin/gtk-update-icon-cache -qf /usr/share/icons/breeze-dark
EOF

  fi

  if [[ ${plasma} == "oxygen-fonts" ]]
  then

cat >> ${DEST}/${plasma}-${VER}/INSTALL << "EOF"

[ -x /usr/bin/fc-cache ] && echo "Processing triggers for fontconfig" && /usr/bin/fc-cache /usr/share/fonts/truetype/oxygen
EOF

  fi

  if [[ -e ${DEST}/${plasma}-${VER}/usr/share/mime ]]
  then

cat >> ${DEST}/${plasma}-${VER}/INSTALL << "EOF"

[ -x /usr/bin/update-mime-database ] && echo "Processing triggers for shared-mime-info" && /usr/bin/update-mime-database /usr/share/mime
EOF

  mimetype=1

  fi

  if [[ ${mimetype} == "1" || $plasma == "breeze" ]] && [[ -e ${DEST}/${plasma}-${VER}/usr/share/icons/hicolor ]]
  then

cat >> ${DEST}/${plasma}-${VER}/INSTALL << "EOF"
[ -x /usr/bin/gtk-update-icon-cache ] && echo "Processing triggers for hicolor-icon-theme" && /usr/bin/gtk-update-icon-cache -qf /usr/share/icons/hicolor
EOF

  gtkicon=1

  elif [[ -e ${DEST}/${plasma}-${VER}/usr/share/icons/hicolor ]]
  then

cat >> ${DEST}/${plasma}-${VER}/INSTALL << "EOF"

[ -x /usr/bin/gtk-update-icon-cache ] && echo "Processing triggers for hicolor-icon-theme" && /usr/bin/gtk-update-icon-cache -qf /usr/share/icons/hicolor
EOF

  gtkicon=1

  fi

  if [[ ${gtkicon} == "1" || ${mimetype} == "1" ]] && [[ -e ${DEST}/${plasma}-${VER}/usr/share/applications ]]
  then

cat >> ${DEST}/${plasma}-${VER}/INSTALL << "EOF"
[ -x /usr/bin/update-desktop-database ] && echo "Processing triggers for desktop-file-utils" && /usr/bin/update-desktop-database
EOF

  desktopfile=1

  elif [[ -e ${DEST}/${plasma}-${VER}/usr/share/applications ]]
  then

cat >> ${DEST}/${plasma}-${VER}/INSTALL << "EOF"

[ -x /usr/bin/update-desktop-database ] && echo "Processing triggers for desktop-file-utils" && /usr/bin/update-desktop-database
EOF

  desktopfile=1

  fi

  if [[ ${desktopfile} == "1" || ${gtkicon} == "1" || ${mimetype} == "1" ]] && [[ -e ${DEST}/${plasma}-${VER}/usr/share/man ]]
  then

cat >> ${DEST}/${plasma}-${VER}/INSTALL << "EOF"
[ -x /usr/bin/mandb ] && echo "Processing triggers for man-db" && /usr/bin/mandb -q
EOF

  manpage=1

  elif [[ -e ${DEST}/${plasma}-${VER}/usr/share/man ]]
  then

cat >> ${DEST}/${plasma}-${VER}/INSTALL << "EOF"

[ -x /usr/bin/mandb ] && echo "Processing triggers for man-db" && /usr/bin/mandb -q
EOF

  manpage=1

  fi

  for sofile in ${DEST}/${plasma}-${VER}/usr/lib/*.so
  do
    if [[ ${sofile} != "${DEST}/${plasma}-${VER}/usr/lib/*.so" ]]
    then
      solib=1
      break
    fi
  done
  unset sofile

  if [[ ${desktopfile} == "1" || ${gtkicon} == "1" || ${manpage} == "1" || ${mimetype} == "1" ]] && [[ ${solib} == "1" ]]
  then

cat >> ${DEST}/${plasma}-${VER}/INSTALL << "EOF"
[ -x /sbin/ldconfig ] && echo "Processing triggers for glibc" && /sbin/ldconfig
EOF

  elif [[ ${solib} == "1" ]]
  then

cat >> ${DEST}/${plasma}-${VER}/INSTALL << "EOF"

[ -x /sbin/ldconfig ] && echo "Processing triggers for glibc" && /sbin/ldconfig
EOF

  fi

  chmod +x ${DEST}/${plasma}-${VER}/INSTALL

  pushd ${DEST}/${plasma}-${VER}
      ./INSTALL
  popd

  unset desktopfile
  unset gtkicon
  unset manpage
  unset mimetype
  unset solib

  #rm -rf ${plasma}

done
