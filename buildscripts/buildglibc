#!/bin/bash -e

export PKGNAME=glibc
export PKGVER=2.22
export PKGTAR=${PKGNAME}-${PKGVER}.tar.xz
export PKGURL="http://mirror.checkdomain.de/gnu/glibc/${PKGNAME}-${PKGVER}.tar.xz"
export PKGDIR=src
export PKGBUILD=build
export MAKE_JOBS_FLAGS="-j4"
export DEBUG_BUILD=1
export KEEP_EMPTY_DIRS=1
export MULTILIB_BUILD=1
export NO_OPTIMIZATION=1

export PATCHES_LIST=("glibc-paths.patch" "glibc-pure64.patch")
export PATCHES_LIST_32=("glibc-paths.patch" "glibc-pure64.patch")
export MAKE_INSTALL_FLAGS="install_root=\${DEST} ${MAKE_JOBS_FLAGS}"
export MAKE_INSTALL_FLAGS_32="install_root=\${PWD}/dest ${MAKE_JOBS_FLAGS}"

post_extract_action() {
  mv ${PKGNAME}-${PKGVER} src
  install -dm755 build
}

configure_pre() {
  echo slibdir=/lib > configparms
  echo rtlddir=/lib >> configparms
}

configure_pre_32() {
  echo slibdir=/lib32 > configparms
  echo rtlddir=/lib32 >> configparms
}

make_post() {
  install -dm755 ${DEST}/etc
  touch ${DEST}/etc/ld.so.conf
}

make_post_32() {
  install -dm755 ${PWD}/dest/etc
  touch ${PWD}/dest/etc/ld.so.conf
}

configure_override() {
  CFLAGS="-march=sandybridge -g -O3 -pipe"   \
  CXXFLAGS="-march=sandybridge -g -O3 -pipe" \
  ../src/configure --prefix=/usr --libdir=/usr/lib --libexecdir=/usr/lib         \
                   --disable-profile --enable-add-ons --enable-kernel=3.4.0      \
                   --enable-bind-now --enable-multi-arch --enable-obsolete-rpc   \
                   --enable-stackguard-randomization --enable-lock-elision       \
                   --with-headers=/usr/include --with-pkgversion="Krejzi ${PKGVER}"
}

configure_override_32() {
  CFLAGS="-march=sandybridge -g -O3 -pipe"   \
  CXXFLAGS="-march=sandybridge -g -O3 -pipe" \
  ../src/configure --prefix=/usr --libdir=/usr/lib32 --libexecdir=/usr/lib32     \
                   --disable-profile --enable-add-ons --enable-kernel=3.4.0      \
                   --enable-bind-now --enable-multi-arch --enable-obsolete-rpc   \
                   --enable-stackguard-randomization --enable-lock-elision       \
                   --with-headers=/usr/include --with-pkgversion="Krejzi ${PKGVER}" \
                  i686-pc-linux-gnu
}

make_install_post() {
  rm -rf ${DEST}/etc/ld.so.conf ${DEST}/etc/ld.so.cache ${DEST}/lib64

cat > ${DEST}/usr/sbin/locale-gen << "EOF"
#!/bin/sh

set -e

LOCALEGEN=/etc/locale.gen
LOCALES=/usr/share/i18n/locales
if [ -n "$POSIXLY_CORRECT" ]; then
  unset POSIXLY_CORRECT
fi


[ -f $LOCALEGEN -a -s $LOCALEGEN ] || exit 0;

# Remove all old locale dir and locale-archive before generating new
# locale data.
rm -rf /usr/lib/locale/* || true

umask 022

is_entry_ok() {
  if [ -n "$locale" -a -n "$charset" ] ; then
    true
  else
    echo "error: Bad entry '$locale $charset'"
    false
  fi
}

echo "Generating locales..."
while read locale charset; do \
        case $locale in \#*) continue;; "") continue;; esac; \
        is_entry_ok || continue
        echo -n "  `echo $locale | sed 's/\([^.\@]*\).*/\1/'`"; \
        echo -n ".$charset"; \
        echo -n `echo $locale | sed 's/\([^\@]*\)\(\@.*\)*/\2/'`; \
        echo -n '...'; \
        if [ -f $LOCALES/$locale ]; then input=$locale; else \
        input=`echo $locale | sed 's/\([^.]*\)[^@]*\(.*\)/\1\2/'`; fi; \
        /usr/bin/localedef -i $input -c -f $charset -A /usr/share/locale/locale.alias $locale; \
        echo ' done'; \
done < $LOCALEGEN
echo "Generation complete."
EOF

  chmod 755 ${DEST}/usr/sbin/locale-gen

cat > ${DEST}/etc/locale.gen.default << "EOF"
# Configuration file for locale-gen
#
# lists of locales that are to be generated by the locale-gen command.
#
# Each line is of the form:
#
#     <locale> <charset>
#
#  where <locale> is one of the locales given in /usr/share/i18n/locales
#  and <charset> is one of the character sets listed in /usr/share/i18n/charmaps
#
#  Examples:
#  en_US ISO-8859-1
#  en_US.UTF-8 UTF-8
#  de_DE ISO-8859-1
#  de_DE@euro ISO-8859-15
#
#  The locale-gen command will generate all the locales,
#  placing them in /usr/lib/locale.
#
#  A list of supported locales is included in this file.
#  Uncomment the ones you need.
#
EOF

  sed -e '1,3d' -e 's|/| |g' -e 's|\\| |g' -e 's|^|#|g' ../src/localedata/SUPPORTED >> ${DEST}/etc/locale.gen.default
  chmod 644 ${DEST}/etc/locale.gen.default
  install -dm755 ${DEST}/etc/ld.so.conf.d ${DEST}/lib/systemd/system ${DEST}/usr/lib/locale \
                 ${DEST}/usr/lib/tmpfiles.d ${DEST}/var/cache/nscd
  install -dm700 ${DEST}/var/cache/ldconfig

cat > ${DEST}/etc/ld.so.conf.d/glibc.conf << "EOF"
/usr/local/lib

/lib32
/usr/lib32
EOF

  chmod 644 ${DEST}/etc/ld.so.conf.d/glibc.conf
  install -m644 ../src/nscd/nscd.conf ../src/posix/gai.conf ${DEST}/etc
  install -m644 ../src/nscd/nscd.tmpfiles ${DEST}/usr/lib/tmpfiles.d
  install -m644 ../src/nscd/nscd.service ${DEST}/lib/systemd/system
}

make_install_post_32() {
  mv dest/usr/include/gnu/lib-names-32.h ${DEST}/usr/include/gnu
  mv dest/usr/include/gnu/stubs-32.h ${DEST}/usr/include/gnu
  ln -sf ../lib32/ld-linux.so.2 ${DEST}/lib/ld-linux.so.2
  ln -sf ../lib/locale ${DEST}/usr/lib32/locale
}

generate_install_override() {
cat > ${DEST}/INSTALL << "EOF"
#!/bin/bash

for dir in etc lib lib32 sbin usr var ; do cp -rf --remove-destination $dir / ; done

if [ ! -e /etc/locale.gen ]; then
   cp /etc/locale.gen.default /etc/locale.gen
fi

/usr/sbin/locale-gen

echo -e "Select desired locale in /etc/locale.gen and run locale-gen again."
echo -e "After that do: echo 'LANG=en_US.UTF-8' > /etc/locale.conf"
echo -e "Replace en_US.UTF-8 with your desired locale.\n"

[ -x /usr/bin/install-info ] && echo "Processing triggers for texinfo" && for file in usr/share/info/* ; do /usr/bin/install-info /$file /usr/share/info/dir ; done
[ -x /sbin/ldconfig ] && echo "Processing triggers for glibc" && /sbin/ldconfig
EOF

chmod 755 ${DEST}/INSTALL
}

. $(dirname $0)/master.sh
