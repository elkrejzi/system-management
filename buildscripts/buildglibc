#!/bin/bash -e

export VER=2.21
export DEST=/binary/glibc-${VER}

mv glibc-${VER} src

pushd src

if [ -f /media/ntfs/Other/Linux/patches/glibc-fixes.patch ]; then
   patch -Np1 -i /media/ntfs/Other/Linux/patches/glibc-fixes.patch
fi

patch -Np1 -i /media/ntfs/Other/Linux/patches/glibc-paths.patch
patch -Np1 -i /media/ntfs/Other/Linux/patches/glibc-pure64.patch

popd

mkdir build32 build64

pushd build64

echo slibdir=/lib > configparms
echo rtlddir=/lib >> configparms

CFLAGS="-march=native -mtune=native -g -O2 -pipe"   \
CXXFLAGS="-march=native -mtune=native -g -O2 -pipe" \
../src/configure --prefix=/usr --libdir=/usr/lib --libexecdir=/usr/lib         \
                 --disable-profile --enable-add-ons --enable-kernel=3.4.0      \
                 --enable-bind-now --enable-multi-arch --enable-obsolete-rpc   \
                 --enable-stackguard-randomization --enable-lock-elision       \
                 --with-headers=/usr/include --with-pkgversion="Krejzi ${VER}"

make -j4

install -dm755 ${DEST}/etc
touch ${DEST}/etc/ld.so.conf

make -j4 install install_root=${DEST}

popd

pushd build32

echo slibdir=/lib32 > configparms
echo rtlddir=/lib32 >> configparms

export CC="gcc -m32"
export CXX="g++ -m32"

CFLAGS="-march=native -mtune=native -g -O2 -pipe"   \
CXXFLAGS="-march=native -mtune=native -g -O2 -pipe" \
../src/configure --prefix=/usr --libdir=/usr/lib32 --libexecdir=/usr/lib32     \
                 --disable-profile --enable-add-ons --enable-kernel=3.4.0      \
                 --enable-bind-now --enable-multi-arch --enable-obsolete-rpc   \
                 --enable-stackguard-randomization --enable-lock-elision       \
                 --with-headers=/usr/include --with-pkgversion="Krejzi ${VER}" \
                i686-pc-linux-gnu

make -j4

install -dm755 ${PWD}/dest/etc
touch ${PWD}/dest/etc/ld.so.conf

make -j4 install install_root=${PWD}/dest

mv dest/lib32 ${DEST}/
mv dest/usr/lib32 ${DEST}/usr/
mv dest/usr/include/gnu/lib-names-32.h ${DEST}/usr/include/gnu/
mv dest/usr/include/gnu/stubs-32.h ${DEST}/usr/include/gnu/

popd

rm -rf ${DEST}/etc/ld.so.conf ${DEST}/etc/ld.so.cache ${DEST}/lib64

cat > ${DEST}/usr/sbin/locale-gen << "EOF"
#!/bin/sh

set -e

LOCALEGEN=/etc/locale.gen
LOCALES=/usr/share/i18n/locales
if [ -n "$POSIXLY_CORRECT" ]; then
  unset POSIXLY_CORRECT
fi


[ -f $LOCALEGEN -a -s $LOCALEGEN ] || exit 0;

# Remove all old locale dir and locale-archive before generating new
# locale data.
rm -rf /usr/lib/locale/* || true

umask 022

is_entry_ok() {
  if [ -n "$locale" -a -n "$charset" ] ; then
    true
  else
    echo "error: Bad entry '$locale $charset'"
    false
  fi
}

echo "Generating locales..."
while read locale charset; do \
	case $locale in \#*) continue;; "") continue;; esac; \
	is_entry_ok || continue
	echo -n "  `echo $locale | sed 's/\([^.\@]*\).*/\1/'`"; \
	echo -n ".$charset"; \
	echo -n `echo $locale | sed 's/\([^\@]*\)\(\@.*\)*/\2/'`; \
	echo -n '...'; \
	if [ -f $LOCALES/$locale ]; then input=$locale; else \
	input=`echo $locale | sed 's/\([^.]*\)[^@]*\(.*\)/\1\2/'`; fi; \
	/usr/bin/localedef -i $input -c -f $charset -A /usr/share/locale/locale.alias $locale; \
	echo ' done'; \
done < $LOCALEGEN
echo "Generation complete."
EOF

chmod 755 ${DEST}/usr/sbin/locale-gen

cat > ${DEST}/etc/locale.gen.default << "EOF"
# Configuration file for locale-gen
#
# lists of locales that are to be generated by the locale-gen command.
#
# Each line is of the form:
#
#     <locale> <charset>
#
#  where <locale> is one of the locales given in /usr/share/i18n/locales
#  and <charset> is one of the character sets listed in /usr/share/i18n/charmaps
#
#  Examples:
#  en_US ISO-8859-1
#  en_US.UTF-8 UTF-8
#  de_DE ISO-8859-1
#  de_DE@euro ISO-8859-15
#
#  The locale-gen command will generate all the locales,
#  placing them in /usr/lib/locale.
#
#  A list of supported locales is included in this file.
#  Uncomment the ones you need.
#
EOF

sed -e '1,3d' -e 's|/| |g' -e 's|\\| |g' -e 's|^|#|g' src/localedata/SUPPORTED >> ${DEST}/etc/locale.gen.default

chmod 644 ${DEST}/etc/locale.gen.default

install -dm755 ${DEST}/etc/ld.so.conf.d ${DEST}/lib/systemd/system ${DEST}/usr/lib/locale \
               ${DEST}/usr/lib/tmpfiles.d ${DEST}/var/cache/nscd

install -dm700 ${DEST}/var/cache/ldconfig

cat > ${DEST}/etc/ld.so.conf.d/glibc.conf << "EOF"
/usr/local/lib

/lib32
/usr/lib32
EOF

chmod 644 ${DEST}/etc/ld.so.conf.d/glibc.conf

rm -rf ${DEST}/usr/share/info/dir ${DEST}/usr/share/info/*.gz
gzip -9 ${DEST}/usr/share/info/*

install -m644 src/nscd/nscd.conf src/posix/gai.conf ${DEST}/etc/
install -m644 src/nscd/nscd.tmpfiles ${DEST}/usr/lib/tmpfiles.d/
install -m644 src/nscd/nscd.service ${DEST}/lib/systemd/system/

ln -sf ../lib32/ld-linux.so.2 ${DEST}/lib/ld-linux.so.2
ln -sf ../lib/locale ${DEST}/usr/lib32/locale

cat > ${DEST}/INSTALL << "EOF"
#!/bin/bash

for dir in etc lib lib32 sbin usr var ; do cp -rf --remove-destination $dir / ; done

if [ ! -e /etc/locale.gen ]; then
   cp /etc/locale.gen.default /etc/locale.gen
fi

/usr/sbin/locale-gen

echo -e "Select desired locale in /etc/locale.gen and run locale-gen again."
echo -e "After that do: echo 'LANG=en_US.UTF-8' > /etc/locale.conf"
echo -e "Replace en_US.UTF-8 with your desired locale.\n"

[ -x /usr/bin/install-info ] && echo "Processing triggers for texinfo" && for file in usr/share/info/* ; do /usr/bin/install-info /$file /usr/share/info/dir ; done
[ -x /sbin/ldconfig ] && echo "Processing triggers for glibc" && /sbin/ldconfig
EOF

chmod 755 ${DEST}/INSTALL

install -dm755 ${DEST}-debug/usr/lib

pushd ${DEST}

find * -type f 2>/dev/null | while read BUILD_BINARY ; do
case "$(file -bi "${BUILD_BINARY}")" in *application/x-sharedlib* | *application/x-executable*)
mkdir -p usr/lib/debug/`dirname ${BUILD_BINARY}`
objcopy --only-keep-debug ${BUILD_BINARY} usr/lib/debug/${BUILD_BINARY}
strip --strip-unneeded ${BUILD_BINARY}
objcopy --add-gnu-debuglink=usr/lib/debug/${BUILD_BINARY} ${BUILD_BINARY}
esac
done

popd

mv ${DEST}/usr/lib/debug ${DEST}-debug/usr/lib

rm -rf src build64 build32
