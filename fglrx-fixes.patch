diff -Naur a/common/lib/modules/fglrx/build_mod/drm_proc.h b/common/lib/modules/fglrx/build_mod/drm_proc.h
--- a/common/lib/modules/fglrx/build_mod/drm_proc.h	2013-05-28 23:34:40.000000000 +0200
+++ b/common/lib/modules/fglrx/build_mod/drm_proc.h	2013-07-16 23:59:54.531878745 +0200
@@ -87,6 +87,7 @@
  * "/proc/ati/%minor%/", and each entry in proc_list as
  * "/proc/ati/%minor%/%name%".
  */
+
 struct proc_dir_entry *DRM(proc_init)(drm_device_t *dev, int minor,
 				      struct proc_dir_entry *root,
 				      struct proc_dir_entry **dev_root)
@@ -94,23 +95,34 @@
 	struct proc_dir_entry *ent;
 	int		      i, j;
 	char                  name[64];
-
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
 	if (!minor) root = create_proc_entry("dri", S_IFDIR, NULL);
+#else
+	if (!minor) root = proc_mkdir("dri", NULL);
+#endif
 	if (!root) {
 		DRM_ERROR("Cannot create /proc/ati\n");
 		return NULL;
 	}
 
 	sprintf(name, "%d", minor);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
 	*dev_root = create_proc_entry(name, S_IFDIR, root);
+#else
+	*dev_root = proc_mkdir(name, root);
+#endif
 	if (!*dev_root) {
 		DRM_ERROR("Cannot create /proc/ati/%s\n", name);
 		return NULL;
 	}
-
 	for (i = 0; i < DRM_PROC_ENTRIES; i++) {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
 		ent = create_proc_entry(DRM(proc_list)[i].name,
 					S_IFREG|S_IRUGO, *dev_root);
+#else
+		ent = proc_create_data(DRM(proc_list)[i].name,
+					S_IFREG|S_IRUGO, *dev_root, &firegl_fops, dev);
+#endif
 		if (!ent) {
 			DRM_ERROR("Cannot create /proc/ati/%s/%s\n",
 				  name, DRM(proc_list)[i].name);
@@ -121,10 +133,11 @@
 			if (!minor) remove_proc_entry("dri", NULL);
 			return NULL;
 		}
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
 		ent->read_proc = DRM(proc_list)[i].f;
 		ent->data      = dev;
+#endif
 	}
-
 	return root;
 }
 
diff -Naur a/common/lib/modules/fglrx/build_mod/firegl_public.c b/common/lib/modules/fglrx/build_mod/firegl_public.c
--- a/common/lib/modules/fglrx/build_mod/firegl_public.c	2013-05-28 23:34:40.000000000 +0200
+++ b/common/lib/modules/fglrx/build_mod/firegl_public.c	2013-07-17 00:00:12.562177575 +0200
@@ -93,7 +93,7 @@
    and they use different config options. These options can only be enabled
    on x86_64 with newer 2.6 kernels (2.6.23 for intel, 2.6.26 for amd). 
 */
-#if defined(CONFIG_AMD_IOMMU) || defined(CONFIG_DMAR)
+#if defined(CONFIG_AMD_IOMMU) || defined(CONFIG_INTEL_IOMMU)
     #define FIREGL_DMA_REMAPPING
 #endif
 
@@ -520,12 +520,23 @@
 #ifdef DEBUG
 READ_PROC_WRAP(drm_bq_info)
 #endif
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
 READ_PROC_WRAP(firegl_debug_proc_read)
+#endif
 READ_PROC_WRAP(firegl_bios_version)
 READ_PROC_WRAP(firegl_interrupt_info)
 READ_PROC_WRAP(firegl_ptm_info)
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
 static int firegl_debug_proc_write_wrap(void* file, const char *buffer, unsigned long count, void *data)
+#else
+static int firegl_debug_proc_read_wrap(struct seq_file *m, void* data)
+{
+	return firegl_debug_proc_read(m->buf, m->from, m->index, m->size, m->size - m->count, data);
+}
+
+static ssize_t firegl_debug_proc_write_wrap(struct file *file, const char *buffer, size_t count, void *data)
+#endif
 {                                                                  
     return firegl_debug_proc_write(file, buffer, count, data);     
 }
@@ -543,14 +554,20 @@
  *
  * \return number of bytes written
  */
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
 static int firegl_major_proc_read(char *buf, char **start, kcl_off_t offset,
                                   int request, int* eof, void* data)
+#else
+static int firegl_major_proc_read(struct seq_file *m, void* data)
+#endif
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
     int len = 0;    // For ProcFS: fill buf from the beginning
 
     KCL_DEBUG1(FN_FIREGL_PROC, "offset %d\n", (int)offset);
 
-    if (offset > 0) 
+    if (offset > 0)
     {
         KCL_DEBUG1(FN_FIREGL_PROC, "no partial requests\n");
         return 0; /* no partial requests */
@@ -561,8 +578,10 @@
 
     len = snprintf(buf, request, "%d\n", major);
 
+#else
+    int len = seq_printf(m, "%d\n", major);
+#endif
     KCL_DEBUG1(FN_FIREGL_PROC, "return len=%i\n",len);
-
     return len;
 }
 
@@ -583,6 +602,29 @@
     { "NULL",           NULL,                       NULL} // Terminate List!!!
 };
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,10,0)
+static int firegl_major_proc_open(struct inode *inode, struct file *file){
+        return single_open(file, firegl_major_proc_read, NULL);
+}
+
+static const struct file_operations firegl_major_fops = {
+        .open = firegl_major_proc_open,
+        .read = seq_read,
+        .llseek = seq_lseek,
+};
+
+static int firegl_debug_proc_open(struct inode *inode, struct file *file){
+        return single_open(file, firegl_debug_proc_read_wrap, NULL);
+}
+
+static const struct file_operations firegl_debug_fops = {
+        .open = firegl_debug_proc_open,
+        .write = firegl_debug_proc_write_wrap,
+        .read = seq_read,
+        .llseek = seq_lseek,
+};
+#endif
+
 static struct proc_dir_entry *firegl_proc_init( device_t *dev,
                                                 int minor,
                                                 struct proc_dir_entry *root,
@@ -595,7 +637,11 @@
     KCL_DEBUG1(FN_FIREGL_PROC, "minor %d, proc_list 0x%08lx\n", minor, (unsigned long)proc_list);
     if (!minor)
     {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
         root = create_proc_entry("ati", S_IFDIR, NULL);
+#else
+        root = proc_mkdir("ati", NULL);
+#endif
     }
 
     if (!root)
@@ -607,18 +653,28 @@
     if (minor == 0)
     {
         // Global major debice number entry
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
         ent = create_proc_entry("major", S_IFREG|S_IRUGO, root);
+#else
+        ent = proc_create("major", S_IFREG|S_IRUGO, root, &firegl_major_fops);
+#endif
         if (!ent)
         {
             remove_proc_entry("ati", NULL);
             KCL_DEBUG_ERROR("Cannot create /proc/ati/major\n");
             return NULL;
         }
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
         ent->read_proc = (read_proc_t*)firegl_major_proc_read;
+#endif
     }
 
     sprintf(name, "%d", minor);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
     *dev_root = create_proc_entry(name, S_IFDIR, root);
+#else
+    *dev_root = proc_mkdir(name, root);
+#endif
     if (!*dev_root) {
         remove_proc_entry("major", root);
         remove_proc_entry("ati", NULL);
@@ -628,7 +684,12 @@
 
     while (list->f || list->fops)
     {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
         ent = create_proc_entry(list->name, S_IFREG|S_IRUGO, *dev_root);
+#else
+        ent = proc_create_data(list->name, S_IFREG|S_IRUGO, *dev_root, &firegl_fops,
+            (dev->pubdev.signature == FGL_DEVICE_SIGNATURE)? firegl_find_device(minor) : (dev));
+#endif
         if (!ent)
         {
             KCL_DEBUG_ERROR("Cannot create /proc/ati/%s/%s\n", name, list->name);
@@ -646,6 +707,7 @@
             return NULL;
         }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
         if (list->f)
         {
             ent->read_proc = (read_proc_t*)list->f;
@@ -659,19 +721,25 @@
         {
             ent->data = (dev->pubdev.signature == FGL_DEVICE_SIGNATURE)? firegl_find_device(minor) : (dev);
         }
-
+#endif
         list++;
     }
 
     if (minor == 0)
     {
         // Global debug entry, only create it once
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
         ent = create_proc_entry("debug", S_IFREG|S_IRUGO, root);
-        if (ent) 
+#else
+        ent = proc_create_data("debug", S_IFREG|S_IRUGO, root, &firegl_debug_fops, dev);
+#endif
+        if (ent)
         {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0)
             ent->read_proc = (read_proc_t*)firegl_debug_proc_read_wrap;     
             ent->write_proc = (write_proc_t*)firegl_debug_proc_write_wrap;  
             ent->data = dev;
+#endif
         }
     }
 
@@ -3088,7 +3156,11 @@
 int ATI_API_CALL KCL_EFI_IS_ENABLED(void)
 {
 #ifdef CONFIG_EFI
+#ifdef EFI_BOOT
+    return efi_enabled(EFI_BOOT);
+#else
     return efi_enabled;
+#endif
 #else
     return 0;
 #endif
diff -Naur a/common/lib/modules/fglrx/build_mod/kcl_agp.c b/common/lib/modules/fglrx/build_mod/kcl_agp.c
--- a/common/lib/modules/fglrx/build_mod/kcl_agp.c	2013-05-28 23:34:40.000000000 +0200
+++ b/common/lib/modules/fglrx/build_mod/kcl_agp.c	2013-07-17 00:00:15.568894184 +0200
@@ -56,6 +56,43 @@
     return kcl_agp_is_in_use;
 }
 
+/** \brief Find AGP caps registers in PCI config space
+ ** \param dev PCI device handle
+ ** \return Positive register index on success, negative errno on error
+ */
+int ATI_API_CALL KCL_AGP_FindCapsRegisters(KCL_PCI_DevHandle dev)
+{
+    u8 capndx;
+    u32 cap_id;
+
+    if (!dev)
+    {
+        return -ENODEV;
+    }
+
+    pci_read_config_byte((struct pci_dev*)dev, 0x34, &capndx);
+
+    if (capndx == 0x00)
+    {
+        return -ENODATA;
+    }
+
+    do
+    { // search capability list for AGP caps
+        pci_read_config_dword((struct pci_dev*)dev, capndx, &cap_id);
+
+        if ((cap_id & 0xff) == 0x02)
+        {
+            return capndx;
+        }
+
+        capndx = (cap_id >> 8) & 0xff;
+    }
+    while (capndx != 0x00);
+
+    return -ENODATA;
+}
+
 #if defined(CONFIG_AGP) || defined(CONFIG_AGP_MODULE)
 
 typedef struct {
@@ -272,43 +309,6 @@
     }
 }
 
-/** \brief Find AGP caps registers in PCI config space
- ** \param dev PCI device handle
- ** \return Positive register index on success, negative errno on error
- */
-int ATI_API_CALL KCL_AGP_FindCapsRegisters(KCL_PCI_DevHandle dev)
-{
-    u8 capndx;
-    u32 cap_id;
-
-    if (!dev)
-    {
-        return -ENODEV;
-    }
-
-    pci_read_config_byte((struct pci_dev*)dev, 0x34, &capndx);
-
-    if (capndx == 0x00)
-    {
-        return -ENODATA;
-    }
-
-    do
-    { // search capability list for AGP caps
-        pci_read_config_dword((struct pci_dev*)dev, capndx, &cap_id);
-
-        if ((cap_id & 0xff) == 0x02)
-        {
-            return capndx;
-        }
-
-        capndx = (cap_id >> 8) & 0xff;
-    }
-    while (capndx != 0x00);
-
-    return -ENODATA;
-}
-
 /** \brief Get AGP caps
  ** \param dev PCI device handle
  ** \param caps pointer to caps vector
